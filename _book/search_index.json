[["index.html", "R-Tutorium 1 Startseite 1.1 Allgemein", " R-Tutorium Marten Walk 2022-02-01 1 Startseite Wilkommen auf dieser Website über das R-Tutorium im WS2021/22. Diese Seite basiert auf RMarkdown Dokumenten und wird mithilfe von bookdown gerendert. 1.1 Allgemein Modul: R-Tutorium 2021/22 Uni: Martin-Luther-Universität Halle Dozent: Christoph Herrmann Autor: Marten Walk "],["pakete-und-datentypen.html", "2 27.10.21 Pakete und Datentypen 2.1 Allgemein 2.2 Datentypen 2.3 Operatoren 2.4 Datenarbeit", " 2 27.10.21 Pakete und Datentypen 2.1 Allgemein 2.1.1 Packages Packages: R benutzt zur erweiterung von Funktionen bestimmte Packages, die Nutzer hochladen können Installation: install.package(\"tidyverse\") Updaten: update(\"tidyverse\") Nutzung in Programmcode: library(\"tidyverse\") 2.1.2 R-Markdown R-Markdown = Syntax von Markdown mit eingebauten Ausfürhungsmöglichkeit Beispiel: x = 10 =&gt; zum Beunutzen Zeile Markieren und CMD+Enter 2.1.3 Installation von wichtigen Paketen für diese Woche Installation der Pakete # install.packages(c(&quot;haven&quot;, &quot;tidyverse&quot;)) Laden in die Session library(&quot;tidyverse&quot;) library(&quot;haven&quot;) 2.2 Datentypen Abfragen des Types einer Variable: mode(10) ## [1] &quot;numeric&quot; –&gt;Output: numeric Leere Menge: y &lt;- NULL oder x &lt;- c() 2.2.0.1 Numerisch entweder integer (natürliche Zahl) oder double (reelle Zahl) x &lt;- 5.5 mode(x) # out: numeric ## [1] &quot;numeric&quot; typeof(x) # out: double ## [1] &quot;double&quot; ## Integers: komplizierter y &lt;- as.integer(3) typeof(y) # out: integer ## [1] &quot;integer&quot; 2.2.0.2 Character Zeichenkette, wie string in python z &lt;- &quot;Hallo&quot; mode(y) # out: character ## [1] &quot;numeric&quot; 2.2.0.3 logical logische Werte, wie TRUE, FALSE bzw. T oder F und NA (not available) TRUE = 1 FALSE = 0 praktisch für Statistische Analysen, bspws Anzahl TRUE einfach sum() is.numeric(x) #out: TRUE ## [1] TRUE is.character(x) #out: FALSE ## [1] FALSE 2.2.0.4 Veränderung von Datentypen Datentypen lassen sich in andere Datentypen umwandeln x &lt;- as.character(x) x # out: &#39;5.5&#39; ## [1] &quot;5.5&quot; x &lt;- as.numeric(x) x # out: 5.5 ## [1] 5.5 Datentyp beeinflusst, welche Funktionen angewendet werden können, und was kombiniert werden kann! 2.2.0.5 vektor werden erstellt mit c() (combine) x &lt;- c(1,2,3) mode(x) # out: &#39;numeric&#39; ## [1] &quot;numeric&quot; y &lt;- c(5,&quot;a&quot;) y # out: (&#39;5&#39;, &#39;a&#39;) ## [1] &quot;5&quot; &quot;a&quot; alle Elemente eines Vektors müssn gleichem Datentyp zugehören. Ein char in einem Vektor macht also alles andere auch zu Vektoren Indizierung von Vektoren x[2] #zweiter Wert out: 2 ## [1] 2 x[c(TRUE,FALSE,TRUE)] #out: 1 3 ## [1] 1 3 !! Achtung nicht 0-index !! 2.2.0.6 Matrizen erzeugt mithilfe der matrix() m &lt;- matrix(1:6, ncol = 2) # 2 Spalten # Matrix wird damit per Spalte besetzt m &lt;- matrix(1:6, ncol = 2, byrow = T) m&lt;- matrix(1:6, nrow = 3) Indizierung von Matrizen mit [Zeile, Spalte] m[1,1] #: 1 ## [1] 1 m[2,] # 2 5 (gesamte zweite spalte ) ## [1] 2 5 wichtige Funktionen: Transponieren: t(m) Diagonale: diag(m) und wie bei Vektoren: alle Elemente selber Datentyp 2.2.0.7 Arrays Ähnlich wie Matrizen , nur dimension &gt; 2 x &lt;- array(1:12, dim = c(2,3,2)) x[2,2,1] ## [1] 4 Indizierung Hier: [Zeile,Spalte,Element] 2.2.0.8 Liste a &lt;- list(4,&quot;a&quot;,c(8,8,8)) Liste kann beliebige andere Objekte, auch unterschiedlicher Länge / Art speichern Indizierung mit a[[2]] -&gt; 'a' 2.2.0.9 DataFrames eine Art der besonderen Liste mit extra Funktionen, muss aber gleiche Länge haben! wie pandas.DataFrame() mpg &lt;- mpg head(mpg) # first 10 rows ## # A tibble: 6 × 11 ## manufacturer model displ year cyl trans drv cty ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 ## 2 audi a4 1.8 1999 4 manu… f 21 ## 3 audi a4 2 2008 4 manu… f 20 ## 4 audi a4 2 2008 4 auto… f 21 ## 5 audi a4 2.8 1999 6 auto… f 16 ## 6 audi a4 2.8 1999 6 manu… f 18 ## # … with 3 more variables: hwy &lt;int&gt;, fl &lt;chr&gt;, ## # class &lt;chr&gt; #Vektor Hersteller hersteller &lt;- mpg$manufacturer x &lt;- data.frame(hersteller,mpg$cyl) # 2 Zeilen gleichen Datensatzes 2.2.0.10 Tibbles neue Art von Datentyp, Dataframe nur noch fancier, noch mehr funktionen tibble() ## # A tibble: 0 × 0 mpg ist ein Tibble Indizierung mit $ oder `mpg[[“year”]] 2.3 Operatoren 2.3.0.1 Vergleichs-operatoren == Gleichheit != Ungleichheit &gt;, &gt;= Größer / Größer Gleich &lt;, &lt;= Kleiner / Kleiner Gleich ! Nicht Beispiel 5 &lt; 3 # out: FALSE ## [1] FALSE 2.3.0.2 logische Operatoren &amp; : AND | : OR ! : NOT &amp;&amp; : AND, aber immer nur auf erste Elemente der Vektoren werden verglichen || : OR, aber auch nur erste Elemente Beispiel 1 &amp; 1 # TRUE ## [1] TRUE 1 | 0 # TRUE ## [1] TRUE 0 | 0 # FALSE ## [1] FALSE a &lt;- c(TRUE, FALSE, FALSE) b &lt;- c(FALSE, TRUE, TRUE) a &amp;&amp; b # FALSE, da nur TRUE und FALSE verglichen ## [1] FALSE a || b # TRUE ## [1] TRUE 2.4 Datenarbeit wir nutzen den datensatz mpg aus tidyverse mpg &lt;- mpg head(mpg) # first 10 rows ## # A tibble: 6 × 11 ## manufacturer model displ year cyl trans drv cty ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 ## 2 audi a4 1.8 1999 4 manu… f 21 ## 3 audi a4 2 2008 4 manu… f 20 ## 4 audi a4 2 2008 4 auto… f 21 ## 5 audi a4 2.8 1999 6 auto… f 16 ## 6 audi a4 2.8 1999 6 manu… f 18 ## # … with 3 more variables: hwy &lt;int&gt;, fl &lt;chr&gt;, ## # class &lt;chr&gt; #Vektor Hersteller hersteller &lt;- mpg$manufacturer Dollarsign = einzelne Spalte des Tibbles / DataFrames Prüfen, ob irgendwas NAs enthält table(is.na(hersteller)) #out: FALSE 234 ## ## FALSE ## 234 # Test mit Jahr year &lt;- mpg$year table(year &gt; 2000) #out: FALSE 117 ; TRUE 117 ## ## FALSE TRUE ## 117 117 sum(year &gt; 2000) #out: 117 ## [1] 117 2.4.0.1 Übungsblatt Aufgabe 1 usa &lt;- data.frame(USArrests) ##1 #a) mode(usa$Murder) ## [1] &quot;numeric&quot; #b) usa$Murder &lt;- as.character(usa$Murder) #c) states &lt;- rownames(usa) rownames(usa) &lt;- NULL #d) usa_m &lt;- as.matrix(usa) #Alles wird zum Character usa_tibble &lt;- as_tibble(usa) # Nichts aendert sich #e) in listof-list umwandeln ?!!! ahh nur die einzelnen Spalten as.list(as.data.frame(t(usa))) ## $V1 ## [1] &quot;13.2&quot; &quot;236&quot; &quot;58&quot; &quot;21.2&quot; ## ## $V2 ## [1] &quot;10&quot; &quot;263&quot; &quot;48&quot; &quot;44.5&quot; ## ## $V3 ## [1] &quot;8.1&quot; &quot;294&quot; &quot;80&quot; &quot;31.0&quot; ## ## $V4 ## [1] &quot;8.8&quot; &quot;190&quot; &quot;50&quot; &quot;19.5&quot; ## ## $V5 ## [1] &quot;9&quot; &quot;276&quot; &quot;91&quot; &quot;40.6&quot; ## ## $V6 ## [1] &quot;7.9&quot; &quot;204&quot; &quot;78&quot; &quot;38.7&quot; ## ## $V7 ## [1] &quot;3.3&quot; &quot;110&quot; &quot;77&quot; &quot;11.1&quot; ## ## $V8 ## [1] &quot;5.9&quot; &quot;238&quot; &quot;72&quot; &quot;15.8&quot; ## ## $V9 ## [1] &quot;15.4&quot; &quot;335&quot; &quot;80&quot; &quot;31.9&quot; ## ## $V10 ## [1] &quot;17.4&quot; &quot;211&quot; &quot;60&quot; &quot;25.8&quot; ## ## $V11 ## [1] &quot;5.3&quot; &quot; 46&quot; &quot;83&quot; &quot;20.2&quot; ## ## $V12 ## [1] &quot;2.6&quot; &quot;120&quot; &quot;54&quot; &quot;14.2&quot; ## ## $V13 ## [1] &quot;10.4&quot; &quot;249&quot; &quot;83&quot; &quot;24.0&quot; ## ## $V14 ## [1] &quot;7.2&quot; &quot;113&quot; &quot;65&quot; &quot;21.0&quot; ## ## $V15 ## [1] &quot;2.2&quot; &quot; 56&quot; &quot;57&quot; &quot;11.3&quot; ## ## $V16 ## [1] &quot;6&quot; &quot;115&quot; &quot;66&quot; &quot;18.0&quot; ## ## $V17 ## [1] &quot;9.7&quot; &quot;109&quot; &quot;52&quot; &quot;16.3&quot; ## ## $V18 ## [1] &quot;15.4&quot; &quot;249&quot; &quot;66&quot; &quot;22.2&quot; ## ## $V19 ## [1] &quot;2.1&quot; &quot; 83&quot; &quot;51&quot; &quot; 7.8&quot; ## ## $V20 ## [1] &quot;11.3&quot; &quot;300&quot; &quot;67&quot; &quot;27.8&quot; ## ## $V21 ## [1] &quot;4.4&quot; &quot;149&quot; &quot;85&quot; &quot;16.3&quot; ## ## $V22 ## [1] &quot;12.1&quot; &quot;255&quot; &quot;74&quot; &quot;35.1&quot; ## ## $V23 ## [1] &quot;2.7&quot; &quot; 72&quot; &quot;66&quot; &quot;14.9&quot; ## ## $V24 ## [1] &quot;16.1&quot; &quot;259&quot; &quot;44&quot; &quot;17.1&quot; ## ## $V25 ## [1] &quot;9&quot; &quot;178&quot; &quot;70&quot; &quot;28.2&quot; ## ## $V26 ## [1] &quot;6&quot; &quot;109&quot; &quot;53&quot; &quot;16.4&quot; ## ## $V27 ## [1] &quot;4.3&quot; &quot;102&quot; &quot;62&quot; &quot;16.5&quot; ## ## $V28 ## [1] &quot;12.2&quot; &quot;252&quot; &quot;81&quot; &quot;46.0&quot; ## ## $V29 ## [1] &quot;2.1&quot; &quot; 57&quot; &quot;56&quot; &quot; 9.5&quot; ## ## $V30 ## [1] &quot;7.4&quot; &quot;159&quot; &quot;89&quot; &quot;18.8&quot; ## ## $V31 ## [1] &quot;11.4&quot; &quot;285&quot; &quot;70&quot; &quot;32.1&quot; ## ## $V32 ## [1] &quot;11.1&quot; &quot;254&quot; &quot;86&quot; &quot;26.1&quot; ## ## $V33 ## [1] &quot;13&quot; &quot;337&quot; &quot;45&quot; &quot;16.1&quot; ## ## $V34 ## [1] &quot;0.8&quot; &quot; 45&quot; &quot;44&quot; &quot; 7.3&quot; ## ## $V35 ## [1] &quot;7.3&quot; &quot;120&quot; &quot;75&quot; &quot;21.4&quot; ## ## $V36 ## [1] &quot;6.6&quot; &quot;151&quot; &quot;68&quot; &quot;20.0&quot; ## ## $V37 ## [1] &quot;4.9&quot; &quot;159&quot; &quot;67&quot; &quot;29.3&quot; ## ## $V38 ## [1] &quot;6.3&quot; &quot;106&quot; &quot;72&quot; &quot;14.9&quot; ## ## $V39 ## [1] &quot;3.4&quot; &quot;174&quot; &quot;87&quot; &quot; 8.3&quot; ## ## $V40 ## [1] &quot;14.4&quot; &quot;279&quot; &quot;48&quot; &quot;22.5&quot; ## ## $V41 ## [1] &quot;3.8&quot; &quot; 86&quot; &quot;45&quot; &quot;12.8&quot; ## ## $V42 ## [1] &quot;13.2&quot; &quot;188&quot; &quot;59&quot; &quot;26.9&quot; ## ## $V43 ## [1] &quot;12.7&quot; &quot;201&quot; &quot;80&quot; &quot;25.5&quot; ## ## $V44 ## [1] &quot;3.2&quot; &quot;120&quot; &quot;80&quot; &quot;22.9&quot; ## ## $V45 ## [1] &quot;2.2&quot; &quot; 48&quot; &quot;32&quot; &quot;11.2&quot; ## ## $V46 ## [1] &quot;8.5&quot; &quot;156&quot; &quot;63&quot; &quot;20.7&quot; ## ## $V47 ## [1] &quot;4&quot; &quot;145&quot; &quot;73&quot; &quot;26.2&quot; ## ## $V48 ## [1] &quot;5.7&quot; &quot; 81&quot; &quot;39&quot; &quot; 9.3&quot; ## ## $V49 ## [1] &quot;2.6&quot; &quot; 53&quot; &quot;66&quot; &quot;10.8&quot; ## ## $V50 ## [1] &quot;6.8&quot; &quot;161&quot; &quot;60&quot; &quot;15.6&quot; Lösung für e) gefunden hier Aufgabe 2 #a) states[c(7,13,33:36,47)] ## [1] &quot;Connecticut&quot; &quot;Illinois&quot; &quot;North Carolina&quot; ## [4] &quot;North Dakota&quot; &quot;Ohio&quot; &quot;Oklahoma&quot; ## [7] &quot;Washington&quot; #b) usa_m[c(2:10,17,24,38,48),c(2,4)] ## Assault Rape ## [1,] &quot;263&quot; &quot;44.5&quot; ## [2,] &quot;294&quot; &quot;31.0&quot; ## [3,] &quot;190&quot; &quot;19.5&quot; ## [4,] &quot;276&quot; &quot;40.6&quot; ## [5,] &quot;204&quot; &quot;38.7&quot; ## [6,] &quot;110&quot; &quot;11.1&quot; ## [7,] &quot;238&quot; &quot;15.8&quot; ## [8,] &quot;335&quot; &quot;31.9&quot; ## [9,] &quot;211&quot; &quot;25.8&quot; ## [10,] &quot;109&quot; &quot;16.3&quot; ## [11,] &quot;259&quot; &quot;17.1&quot; ## [12,] &quot;106&quot; &quot;14.9&quot; ## [13,] &quot; 81&quot; &quot; 9.3&quot; #d) murder_less_than_5 &lt;- usa[usa$Murder &lt; 5,] #e) extreme_pop_matrix &lt;- usa[usa$UrbanPop &gt;= 80 | usa$UrbanPop &lt;= 50, ] #f) dist &lt;- as.vector(rnorm(n=1000, mean=35, sd=10)) "],["der-tidyverse-approach.html", "3 02.11.02 Der Tidyverse Approach 3.1 readr for import 3.2 working with tidyr 3.3 dplyr 3.4 Aufgabenblatt", " 3 02.11.02 Der Tidyverse Approach Import -&gt; Tidy -&gt; Transform / Visualise / Model -&gt; Communicate 3.1 readr for import library(&quot;readr&quot;) Paket zum importieren verschiedener Formate Import der Dateien (nur mit working directory in “Einführungs” Folder) #normal CSV flights_csv &lt;- read_csv(&quot;data/flights.csv&quot;) #STATA flights_dta &lt;- read_dta(&quot;data/flights.dta&quot;) #SPSS flights_sav &lt;- read_sav(&quot;data/flights.sav&quot;) load(&quot;data/flights.RData&quot;) =&gt; verschiedene praktische Sachen, alles auch im cheatsheet 3.2 working with tidyr library(&quot;tidyr&quot;) different functions to wrangle datasets and clean them gather: gather columns into key value pairs #pipe the table into a function table4a %&gt;% gather(&quot;1999&quot;,&quot;2000&quot;, key=&quot;year&quot;, value=&quot;cases&quot;) ## # A tibble: 6 × 3 ## country year cases ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Afghanistan 1999 745 ## 2 Brazil 1999 37737 ## 3 China 1999 212258 ## 4 Afghanistan 2000 2666 ## 5 Brazil 2000 80488 ## 6 China 2000 213766 spread: spread key value pair across columns #pipe the table into a function table2 %&gt;% spread(key=&quot;type&quot;, value=&quot;count&quot;, convert = T) ## # A tibble: 6 × 4 ## country year cases population ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 1999 745 19987071 ## 2 Afghanistan 2000 2666 20595360 ## 3 Brazil 1999 37737 172006362 ## 4 Brazil 2000 80488 174504898 ## 5 China 1999 212258 1272915272 ## 6 China 2000 213766 1280428583 separate: turn single character column into multiple columns table3 %&gt;% separate(rate, into = c(&quot;cases&quot;, &quot;population&quot;), convert = T) ## # A tibble: 6 × 4 ## country year cases population ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Afghanistan 1999 745 19987071 ## 2 Afghanistan 2000 2666 20595360 ## 3 Brazil 1999 37737 172006362 ## 4 Brazil 2000 80488 174504898 ## 5 China 1999 212258 1272915272 ## 6 China 2000 213766 1280428583 unite: unit columns into one table5 %&gt;% unite(&quot;century&quot;, &quot;year&quot;, col = &quot;year&quot;, sep=&quot;&quot;) ## # A tibble: 6 × 3 ## country year rate ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Afghanistan 1999 745/19987071 ## 2 Afghanistan 2000 2666/20595360 ## 3 Brazil 1999 37737/172006362 ## 4 Brazil 2000 80488/174504898 ## 5 China 1999 212258/1272915272 ## 6 China 2000 213766/1280428583 3.3 dplyr Datentransformation mit dplyr library(&quot;dplyr&quot;) library(&quot;nycflights13&quot;) Einladen des Datensatzes filter: einzelne Zeilen aus dem Datensatz raúsziehen flights %&gt;% filter(month == 1, day == 1) ## # A tibble: 842 × 19 ## year month day dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # … with 832 more rows, and 13 more variables: ## # arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; flights %&gt;% filter(arr_delay &gt;= 60) ## # A tibble: 28,317 × 19 ## year month day dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 811 630 101 ## 2 2013 1 1 848 1835 853 ## 3 2013 1 1 957 733 144 ## 4 2013 1 1 1114 900 134 ## 5 2013 1 1 1120 944 96 ## 6 2013 1 1 1255 1200 55 ## 7 2013 1 1 1301 1150 71 ## 8 2013 1 1 1337 1220 77 ## 9 2013 1 1 1342 1320 22 ## 10 2013 1 1 1356 1259 57 ## # … with 28,307 more rows, and 13 more variables: ## # arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; arrange: ordnen von Daten flights %&gt;% arrange(dep_time) ## # A tibble: 336,776 × 19 ## year month day dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 13 1 2249 72 ## 2 2013 1 31 1 2100 181 ## 3 2013 11 13 1 2359 2 ## 4 2013 12 16 1 2359 2 ## 5 2013 12 20 1 2359 2 ## 6 2013 12 26 1 2359 2 ## 7 2013 12 30 1 2359 2 ## 8 2013 2 11 1 2100 181 ## 9 2013 2 24 1 2245 76 ## 10 2013 3 8 1 2355 6 ## # … with 336,766 more rows, and 13 more variables: ## # arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; select: einzelne spalten flights %&gt;% dplyr::select(year : day) ## # A tibble: 336,776 × 3 ## year month day ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 ## 2 2013 1 1 ## 3 2013 1 1 ## 4 2013 1 1 ## 5 2013 1 1 ## 6 2013 1 1 ## 7 2013 1 1 ## 8 2013 1 1 ## 9 2013 1 1 ## 10 2013 1 1 ## # … with 336,766 more rows rename: Umbenennung von Spalten namen dplyr::rename(flights, arriving = arr_time) ## # A tibble: 336,776 × 19 ## year month day dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## 7 2013 1 1 555 600 -5 ## 8 2013 1 1 557 600 -3 ## 9 2013 1 1 557 600 -3 ## 10 2013 1 1 558 600 -2 ## # … with 336,766 more rows, and 13 more variables: ## # arriving &lt;int&gt;, sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, ## # tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; mutate: eurezugt neue Variable aus alten flights %&gt;% dplyr::select(distance,air_time) %&gt;% dplyr::mutate(speed = distance/air_time * 60) ## # A tibble: 336,776 × 3 ## distance air_time speed ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1400 227 370. ## 2 1416 227 374. ## 3 1089 160 408. ## 4 1576 183 517. ## 5 762 116 394. ## 6 719 150 288. ## 7 1065 158 404. ## 8 229 53 259. ## 9 944 140 405. ## 10 733 138 319. ## # … with 336,766 more rows summarize und count flights %&gt;% dplyr::summarize(delay_average = mean(dep_delay, na.rm = T) ) ## # A tibble: 1 × 1 ## delay_average ## &lt;dbl&gt; ## 1 12.6 groupby : Gruppieren von Daten flights %&gt;% group_by(carrier) %&gt;% summarize(del_avg = mean(dep_delay, na.rm = T), del_sd= sd(dep_delay, na.rm = T), del_median = median(dep_delay, na.rm = T) ) ## # A tibble: 16 × 4 ## carrier del_avg del_sd del_median ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 9E 16.7 45.9 -2 ## 2 AA 8.59 37.4 -3 ## 3 AS 5.80 31.4 -3 ## 4 B6 13.0 38.5 -1 ## 5 DL 9.26 39.7 -2 ## 6 EV 20.0 46.6 -1 ## 7 F9 20.2 58.4 0.5 ## 8 FL 18.7 52.7 1 ## 9 HA 4.90 74.1 -4 ## 10 MQ 10.6 39.2 -3 ## 11 OO 12.6 43.1 -6 ## 12 UA 12.1 35.7 0 ## 13 US 3.78 28.1 -4 ## 14 VX 12.9 44.8 0 ## 15 WN 17.7 43.3 1 ## 16 YV 19.0 49.2 -2 join: zusammenfügen verschiedener Datensätze flights %&gt;% dplyr::select(carrier, dep_time) %&gt;% left_join(airlines, by = &quot;carrier&quot;) ## # A tibble: 336,776 × 3 ## carrier dep_time name ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 UA 517 United Air Lines Inc. ## 2 UA 533 United Air Lines Inc. ## 3 AA 542 American Airlines Inc. ## 4 B6 544 JetBlue Airways ## 5 DL 554 Delta Air Lines Inc. ## 6 UA 554 United Air Lines Inc. ## 7 B6 555 JetBlue Airways ## 8 EV 557 ExpressJet Airlines Inc. ## 9 B6 557 JetBlue Airways ## 10 AA 558 American Airlines Inc. ## # … with 336,766 more rows 3.4 Aufgabenblatt Starwars - Datensatz einladen 3.4.1 tidyr-arbeit: load(&quot;data/starwars.RData&quot;) #1 starwars2 %&gt;% tidyr::gather(&quot;feminine&quot;, &quot;masculine&quot;, , key = &quot;gender&quot;, value = &quot;mass&quot;, na.rm = T) ## # A tibble: 58 × 6 ## name height hair_color `&lt;NA&gt;` gender mass ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Adi Gallia 184 none NA femini… 50 ## 2 Ayla Secura 178 none NA femini… 55 ## 3 Barriss Offee 166 black NA femini… 50 ## 4 Beru Whitesun… 165 brown NA femini… 75 ## 5 Leia Organa 150 brown NA femini… 49 ## 6 Luminara Undu… 170 black NA femini… 56.2 ## 7 Padmé Amidala 165 brown NA femini… 45 ## 8 Shaak Ti 178 none NA femini… 57 ## 9 Zam Wesell 168 blonde NA femini… 55 ## 10 Ackbar 180 none NA mascul… 83 ## # … with 48 more rows #2 !Not finished tidyr::unite(starwars2, &quot;feminine&quot;, &quot;masculine&quot;, col = &quot;gender&quot; , na.rm = T) ## # A tibble: 87 × 5 ## name height hair_color gender `&lt;NA&gt;` ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Ackbar 180 none &quot;83&quot; NA ## 2 Adi Gallia 184 none &quot;50&quot; NA ## 3 Anakin Skywalker 188 blond &quot;84&quot; NA ## 4 Arvel Crynyd NA brown &quot;&quot; NA ## 5 Ayla Secura 178 none &quot;55&quot; NA ## 6 Bail Prestor Organa 191 black &quot;&quot; NA ## 7 Barriss Offee 166 black &quot;50&quot; NA ## 8 BB8 NA none &quot;&quot; NA ## 9 Ben Quadinaros 163 none &quot;65&quot; NA ## 10 Beru Whitesun lars 165 brown &quot;75&quot; NA ## # … with 77 more rows #3 tidyr::spread(starwars3, key=body_measure, value = body_values, convert = T) ## # A tibble: 87 × 5 ## name hair_color gender height mass ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Ackbar none masculine 180 83 ## 2 Adi Gallia none feminine 184 50 ## 3 Anakin Skywalker blond masculine 188 84 ## 4 Arvel Crynyd brown masculine NA NA ## 5 Ayla Secura none feminine 178 55 ## 6 Bail Prestor Organa black masculine 191 NA ## 7 Barriss Offee black feminine 166 50 ## 8 BB8 none masculine NA NA ## 9 Ben Quadinaros none masculine 163 65 ## 10 Beru Whitesun lars brown feminine 165 75 ## # … with 77 more rows #4 problems with doulbes and integers tidyr::separate(starwars4, mass_height, into=c(&quot;mass&quot;, &quot;height&quot;),convert = T) ## Warning: Expected 2 pieces. Additional pieces discarded ## in 2 rows [21, 61]. ## # A tibble: 87 × 5 ## name hair_color gender mass height ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Luke Skywalker blond mascul… 77 172 ## 2 C-3PO &lt;NA&gt; mascul… 75 167 ## 3 R2-D2 &lt;NA&gt; mascul… 32 96 ## 4 Darth Vader none mascul… 136 202 ## 5 Leia Organa brown femini… 49 150 ## 6 Owen Lars brown, grey mascul… 120 178 ## 7 Beru Whitesun lars brown femini… 75 165 ## 8 R5-D4 &lt;NA&gt; mascul… 32 97 ## 9 Biggs Darklighter black mascul… 84 183 ## 10 Obi-Wan Kenobi auburn, white mascul… 77 182 ## # … with 77 more rows #5 tidyr::unite(starwars5, hair_color1, hair_color2, col = &quot;haircolor&quot;, na.rm = T, sep=&quot;-&quot;) ## # A tibble: 87 × 5 ## name height mass haircolor gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Skywalker 172 77 &quot;blond&quot; mascu… ## 2 C-3PO 167 75 &quot;&quot; mascu… ## 3 R2-D2 96 32 &quot;&quot; mascu… ## 4 Darth Vader 202 136 &quot;none&quot; mascu… ## 5 Leia Organa 150 49 &quot;brown&quot; femin… ## 6 Owen Lars 178 120 &quot;brown-grey&quot; mascu… ## 7 Beru Whitesun lars 165 75 &quot;brown&quot; femin… ## 8 R5-D4 97 32 &quot;&quot; mascu… ## 9 Biggs Darklighter 183 84 &quot;black&quot; mascu… ## 10 Obi-Wan Kenobi 182 77 &quot;auburn-white&quot; mascu… ## # … with 77 more rows 3.4.2 dplyr-arbeit: #1 starwars %&gt;% filter(mass &gt; 75, mass &lt; 100, height &gt; 180, height &lt; 190) %&gt;% count(eye_color) ## # A tibble: 5 × 2 ## eye_color n ## &lt;chr&gt; &lt;int&gt; ## 1 black 1 ## 2 blue 1 ## 3 blue-gray 1 ## 4 brown 6 ## 5 yellow 1 #2 starwars %&gt;% filter(is.na(height) | is.na(height)) ## # A tibble: 6 × 16 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Arvel Cr… NA NA brown fair brown ## 2 Finn NA NA black dark dark ## 3 Rey NA NA brown light hazel ## 4 Poe Dame… NA NA brown light brown ## 5 BB8 NA NA none none black ## 6 Captain … NA NA unknown unknown unknown ## # … with 10 more variables: birth_year &lt;dbl&gt;, ## # sex &lt;chr&gt;, gender &lt;chr&gt;, homeworld &lt;chr&gt;, ## # species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt;, star_string &lt;chr&gt;, ## # films_low &lt;chr&gt; #3 dplyr::arrange(starwars, -desc(mass)) ## # A tibble: 87 × 16 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Ratts T… 79 15 none grey, blue unknown ## 2 Yoda 66 17 white green brown ## 3 Wicket … 88 20 brown brown brown ## 4 R2-D2 96 32 &lt;NA&gt; white, bl… red ## 5 R5-D4 97 32 &lt;NA&gt; white, red red ## 6 Sebulba 112 40 none grey, red orange ## 7 Dud Bolt 94 45 none blue, grey yellow ## 8 Padmé A… 165 45 brown light brown ## 9 Wat Tam… 193 48 none green, gr… unknown ## 10 Sly Moo… 178 48 none pale white ## # … with 77 more rows, and 10 more variables: ## # birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, ## # star_string &lt;chr&gt;, films_low &lt;chr&gt; dplyr::arrange(starwars, desc(height)) ## # A tibble: 87 × 16 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Yarael… 264 NA none white yellow ## 2 Tarfful 234 136 brown brown blue ## 3 Lama Su 229 88 none grey black ## 4 Chewba… 228 112 brown unknown blue ## 5 Roos T… 224 82 none grey orange ## 6 Grievo… 216 159 none brown, whi… green, y… ## 7 Taun We 213 NA none grey black ## 8 Rugor … 206 NA none green orange ## 9 Tion M… 206 80 none grey black ## 10 Darth … 202 136 none white yellow ## # … with 77 more rows, and 10 more variables: ## # birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, ## # star_string &lt;chr&gt;, films_low &lt;chr&gt; #Darth Vader height = 202 #4 starwars %&gt;% dplyr::filter(species != &quot;Droid&quot;) %&gt;% dplyr::select(name:mass) %&gt;% dplyr::mutate(bmi = mass/((height/100)**2)) ## # A tibble: 77 × 4 ## name height mass bmi ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Luke Skywalker 172 77 26.0 ## 2 Darth Vader 202 136 33.3 ## 3 Leia Organa 150 49 21.8 ## 4 Owen Lars 178 120 37.9 ## 5 Beru Whitesun lars 165 75 27.5 ## 6 Biggs Darklighter 183 84 25.1 ## 7 Obi-Wan Kenobi 182 77 23.2 ## 8 Anakin Skywalker 188 84 23.8 ## 9 Wilhuff Tarkin 180 NA NA ## 10 Chewbacca 228 112 21.5 ## # … with 67 more rows #5 starwars %&gt;% dplyr::rename(&quot;größe&quot; = &quot;height&quot; ) %&gt;% rename(&quot;gewicht&quot;= &quot;mass&quot;) %&gt;% rename(&quot;haarfarbe&quot;= &quot;hair_color&quot; ) %&gt;% rename(&quot;hautfarbe&quot;= &quot;skin_color&quot;) ## # A tibble: 87 × 16 ## name größe gewicht haarfarbe hautfarbe eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Sk… 172 77 blond fair blue ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow ## 3 R2-D2 96 32 &lt;NA&gt; white, b… red ## 4 Darth V… 202 136 none white yellow ## 5 Leia Or… 150 49 brown light brown ## 6 Owen La… 178 120 brown, gr… light blue ## 7 Beru Wh… 165 75 brown light blue ## 8 R5-D4 97 32 &lt;NA&gt; white, r… red ## 9 Biggs D… 183 84 black light brown ## 10 Obi-Wan… 182 77 auburn, w… fair blue-gray ## # … with 77 more rows, and 10 more variables: ## # birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, ## # star_string &lt;chr&gt;, films_low &lt;chr&gt; #6 starwars %&gt;% dplyr::filter(species != &quot;Droid&quot;) %&gt;% dplyr::filter(!is.na(height) , !is.na(mass)) %&gt;% dplyr::select(name:mass) %&gt;% dplyr::mutate(bmi = mass/((height/100)**2)) %&gt;% dplyr::summarize( mass_mean = mean(mass), mass_median = median(mass), mass_sd = sd(mass), height_mean = mean(height), height_median = median(height), height_sd = sd(height), bmi_mean = mean(bmi), bmi_median = median(bmi), bmi_sd = sd(bmi), ) ## # A tibble: 1 × 9 ## mass_mean mass_median mass_sd height_mean ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 100. 79 177. 176. ## # … with 5 more variables: height_median &lt;dbl&gt;, ## # height_sd &lt;dbl&gt;, bmi_mean &lt;dbl&gt;, bmi_median &lt;dbl&gt;, ## # bmi_sd &lt;dbl&gt; #7 starwars %&gt;% dplyr::filter(!is.na(height) , !is.na(mass)) %&gt;% dplyr::select(name:mass, species) %&gt;% dplyr::mutate(bmi = mass/((height/100)**2)) %&gt;% dplyr::group_by(species) %&gt;% dplyr::summarize( mass_mean = mean(mass), mass_median = median(mass), mass_sd = sd(mass), height_mean = mean(height), height_median = median(height), height_sd = sd(height), bmi_mean = mean(bmi), bmi_median = median(bmi), bmi_sd = sd(bmi), ) ## # A tibble: 32 × 10 ## species mass_mean mass_median mass_sd height_mean ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Aleena 15 15 NA 79 ## 2 Besalisk 102 102 NA 198 ## 3 Cerean 82 82 NA 198 ## 4 Clawdite 55 55 NA 168 ## 5 Droid 69.8 53.5 51.0 140 ## 6 Dug 40 40 NA 112 ## 7 Ewok 20 20 NA 88 ## 8 Geonosian 80 80 NA 183 ## 9 Gungan 74 74 11.3 210 ## 10 Human 82.8 79 19.4 180. ## # … with 22 more rows, and 5 more variables: ## # height_median &lt;dbl&gt;, height_sd &lt;dbl&gt;, ## # bmi_mean &lt;dbl&gt;, bmi_median &lt;dbl&gt;, bmi_sd &lt;dbl&gt; #8 starwars %&gt;% dplyr::filter(!is.na(height) , !is.na(mass)) %&gt;% dplyr::select(name:mass, gender, species) %&gt;% dplyr::mutate(bmi = mass/((height/100)**2)) %&gt;% dplyr::group_by(gender, species) %&gt;% dplyr::summarize( mass_mean = mean(mass), mass_median = median(mass), mass_sd = sd(mass), height_mean = mean(height), height_median = median(height), height_sd = sd(height), bmi_mean = mean(bmi), bmi_median = median(bmi), bmi_sd = sd(bmi), ) ## `summarise()` has grouped output by &#39;gender&#39;. You can override using the `.groups` argument. ## # A tibble: 33 × 11 ## # Groups: gender [3] ## gender species mass_mean mass_median mass_sd ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 feminine Clawdite 55 55 NA ## 2 feminine Human 56.3 49 16.3 ## 3 feminine Mirialan 53.1 53.1 4.38 ## 4 feminine Tholothian 50 50 NA ## 5 feminine Togruta 57 57 NA ## 6 feminine Twi&#39;lek 55 55 NA ## 7 masculine Aleena 15 15 NA ## 8 masculine Besalisk 102 102 NA ## 9 masculine Cerean 82 82 NA ## 10 masculine Droid 69.8 53.5 51.0 ## # … with 23 more rows, and 6 more variables: ## # height_mean &lt;dbl&gt;, height_median &lt;dbl&gt;, ## # height_sd &lt;dbl&gt;, bmi_mean &lt;dbl&gt;, bmi_median &lt;dbl&gt;, ## # bmi_sd &lt;dbl&gt; #9 count(starwars, gender) ## # A tibble: 3 × 2 ## gender n ## &lt;chr&gt; &lt;int&gt; ## 1 feminine 17 ## 2 masculine 66 ## 3 &lt;NA&gt; 4 #10 dplyr::left_join(starwars6,starwars7, on = &quot;name&quot;) ## Joining, by = &quot;name&quot; ## # A tibble: 87 × 14 ## name height mass birth_year hair_color skin_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke S… 172 77 19 blond fair ## 2 C-3PO 167 75 112 &lt;NA&gt; gold ## 3 R2-D2 96 32 33 &lt;NA&gt; white, bl… ## 4 Darth … 202 136 41.9 none white ## 5 Leia O… 150 49 19 brown light ## 6 Owen L… 178 120 52 brown, gr… light ## 7 Beru W… 165 75 47 brown light ## 8 R5-D4 97 32 NA &lt;NA&gt; white, red ## 9 Biggs … 183 84 24 black light ## 10 Obi-Wa… 182 77 57 auburn, w… fair ## # … with 77 more rows, and 8 more variables: ## # eye_color &lt;chr&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; yeehaw, fertig "],["tidyverse-mit-stringr-forcats-lubridate.html", "4 08.11.21 tidyverse mit stringr, forcats, lubridate 4.1 stringr-Paket 4.2 forcats 4.3 lubridate 4.4 Aufgabenblatt 3", " 4 08.11.21 tidyverse mit stringr, forcats, lubridate library(&quot;tidyverse&quot;) 4.1 stringr-Paket paar Beispielstrings kreieren string1 &lt;- &quot;Hello&quot; string2 &lt;- &quot;Bye&quot; mu &lt;- &quot;\\u03BC&quot; # mathematisches Zeichen mu char_vector &lt;- c(string1,string2, mu) char_vector ## [1] &quot;Hello&quot; &quot;Bye&quot; &quot;μ&quot; 4.1.1 str_length() Nutzen für Länge von Strings str_length(char_vector) ## [1] 5 3 1 4.1.2 str_c() Kombinieren von Strings str_c(string1,string2, sep = &quot;|&quot;) ## [1] &quot;Hello|Bye&quot; 4.1.3 str_sub() zum Subsetten x &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pears&quot;) str_sub(x,start= 1,end= 3) ## [1] &quot;app&quot; &quot;ban&quot; &quot;pea&quot; #überschreiben der 2- 4 buchstaben als Großbuchstaben str_sub(x,start= 2,end= 4) &lt;- str_to_upper(str_sub(x,2,4)) x ## [1] &quot;aPPLe&quot; &quot;bANAna&quot; &quot;pEARs&quot; 4.1.4 str_sort() Sortieren str_sort(x, locale = &quot;en&quot;, decreasing = T ) ## [1] &quot;pEARs&quot; &quot;bANAna&quot; &quot;aPPLe&quot; 4.1.5 str_view() Regex Muster erkennen und markieren str_view(x, pattern = &quot;A&quot;) wichtigste RegExs im stringrcheatsheet ! 4.1.6 str_detect() RegEx Muster herausfiltern words[str_detect(words, &quot;^y&quot;)] # alle wörter die mit m anfangen ## [1] &quot;year&quot; &quot;yes&quot; &quot;yesterday&quot; &quot;yet&quot; ## [5] &quot;you&quot; &quot;young&quot; sum(str_detect(words, &quot;[aeiou]$&quot;)) # wörter mit vokal am ende ## [1] 271 words[!str_detect(words, &quot;[aeiou]&quot;)] #wörter ohne vokal ## [1] &quot;by&quot; &quot;dry&quot; &quot;fly&quot; &quot;mrs&quot; &quot;try&quot; &quot;why&quot; 4.1.7 str_count() mean(str_count(words, &quot;[aeiou]&quot;)) #durschnitt vokale pro wort ## [1] 1.991837 4.1.8 beispiel df &lt;- tibble(word = words, i = seq_along(word)) head(df) ## # A tibble: 6 × 2 ## word i ## &lt;chr&gt; &lt;int&gt; ## 1 a 1 ## 2 able 2 ## 3 about 3 ## 4 absolute 4 ## 5 accept 5 ## 6 account 6 df %&gt;% mutate(vokale = str_count(word, &quot;[aeiou]&quot;), konsonanten = str_count(word, &quot;[^aeiou]&quot;)) ## # A tibble: 980 × 4 ## word i vokale konsonanten ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 a 1 1 0 ## 2 able 2 2 2 ## 3 about 3 3 2 ## 4 absolute 4 4 4 ## 5 accept 5 2 4 ## 6 account 6 3 4 ## 7 achieve 7 4 3 ## 8 across 8 2 4 ## 9 act 9 1 2 ## 10 active 10 3 3 ## # … with 970 more rows 4.1.9 regex() funktion statt patterns sind auch regex-matches mithilfe der regex() funktion möglich ban &lt;- c(&quot;Banana&quot;, &quot;banana&quot;, &quot;BANANA&quot;) ban %&gt;% str_view(regex(&quot;banana&quot;)) 4.2 forcats nützliches Paket zur Arbeit mit Faktoren # library(forcats) string &lt;- c(&quot;Dez&quot;, &quot;Jan&quot;, &quot;Feb&quot;, &quot;Apr&quot;) sort(string) ## [1] &quot;Apr&quot; &quot;Dez&quot; &quot;Feb&quot; &quot;Jan&quot; merke: hier wird nach Alphabet sortiert monate_level &lt;- c( &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mär&quot;, &quot;Apr&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Okt&quot;, &quot;Nov&quot;, &quot;Dez&quot; ) 4.2.1 factor() Kodieren mit Faktoren faktor &lt;- factor(string, monate_level) sort(faktor) # sortierung der Monate nach Faktoren ## [1] Jan Feb Apr Dez ## 11 Levels: Jan Feb Mär Apr Jun Jul Aug Sep Okt ... Dez merke: zur Sortierung nach Level factor benutzen 4.2.2 Beispiel Einsatz gss_cat # Datensatz ## # A tibble: 21,483 × 9 ## year marital age race rincome partyid relig denom ## &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 2000 Never … 26 White $8000 … Ind,ne… Prot… Sout… ## 2 2000 Divorc… 48 White $8000 … Not st… Prot… Bapt… ## 3 2000 Widowed 67 White Not ap… Indepe… Prot… No d… ## 4 2000 Never … 39 White Not ap… Ind,ne… Orth… Not … ## 5 2000 Divorc… 25 White Not ap… Not st… None Not … ## 6 2000 Married 25 White $20000… Strong… Prot… Sout… ## 7 2000 Never … 36 White $25000… Not st… Chri… Not … ## 8 2000 Divorc… 44 White $7000 … Ind,ne… Prot… Luth… ## 9 2000 Married 44 White $25000… Not st… Prot… Other ## 10 2000 Married 47 White $25000… Strong… Prot… Sout… ## # … with 21,473 more rows, and 1 more variable: ## # tvhours &lt;int&gt; sortieren nach religion relig &lt;- gss_cat %&gt;% group_by(relig) %&gt;% summarize( avg_age = mean(age, na.rm=T), avg_tv = mean(tvhours, na.rm = T), n = n(), ) ggplot(relig, aes(avg_tv, relig)) + geom_point() merke: plot ist unübersichtlich, deswegen jetzt anwendung factors ggplot(relig, aes(avg_tv, fct_reorder(relig, avg_tv))) + geom_point() =&gt; jetzt isses schön sortiert mit fct_reorder möglicher Einsatz auch von fct_recode zur Umbenennung von Faktoren gss_cat %&gt;% mutate(race = fct_recode(race, &quot;Anders&quot;= &quot;Other&quot;, &quot;Weiß&quot; = &quot;White&quot;, &quot;Schwarz&quot; = &quot;Black&quot; )) ## # A tibble: 21,483 × 9 ## year marital age race rincome partyid relig denom ## &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 2000 Never … 26 Weiß $8000 … Ind,ne… Prot… Sout… ## 2 2000 Divorc… 48 Weiß $8000 … Not st… Prot… Bapt… ## 3 2000 Widowed 67 Weiß Not ap… Indepe… Prot… No d… ## 4 2000 Never … 39 Weiß Not ap… Ind,ne… Orth… Not … ## 5 2000 Divorc… 25 Weiß Not ap… Not st… None Not … ## 6 2000 Married 25 Weiß $20000… Strong… Prot… Sout… ## 7 2000 Never … 36 Weiß $25000… Not st… Chri… Not … ## 8 2000 Divorc… 44 Weiß $7000 … Ind,ne… Prot… Luth… ## 9 2000 Married 44 Weiß $25000… Not st… Prot… Other ## 10 2000 Married 47 Weiß $25000… Strong… Prot… Sout… ## # … with 21,473 more rows, and 1 more variable: ## # tvhours &lt;int&gt; weitere wichtige Funktionen: - fct_collapse zum Zusammenfassen von Merkmalen - fct_lump auch Zusammenfassen irgendwie 4.3 lubridate Paket zum Zeiten und Daten(Kalender)-Wrangeln Arten von Zeit: time, date, datetime now() ## [1] &quot;2022-02-03 10:32:40 CET&quot; today() ## [1] &quot;2022-02-03&quot; library(lubridate) Wege, dates/times zu generieren: Strings individuelle Datetime komponenten aus vorhandenen Komponenten 4.3.1 1.ymd(), mdy(), dmy_hms() aus string mit lubridate dmy(&quot;14th September 2024&quot;) ## [1] &quot;2024-09-14&quot; ymd(&quot;2021, December, 21&quot;) ## [1] &quot;2021-12-21&quot; mdy(122108) ## [1] &quot;2008-12-21&quot; ymd_hms(&quot;21 September 08 13:54:33&quot;) ## [1] &quot;2021-09-08 13:54:33 UTC&quot; 4.3.2 2. make_date() library(nycflights13) head(flights) ## # A tibble: 6 × 19 ## year month day dep_time sched_dep_time dep_delay ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2013 1 1 517 515 2 ## 2 2013 1 1 533 529 4 ## 3 2013 1 1 542 540 2 ## 4 2013 1 1 544 545 -1 ## 5 2013 1 1 554 600 -6 ## 6 2013 1 1 554 558 -4 ## # … with 13 more variables: arr_time &lt;int&gt;, ## # sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, ## # distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt; flights %&gt;% dplyr::select(year,month, day, hour, minute) %&gt;% mutate( departure = make_datetime(year, month, day, hour, minute), date = make_date(year,month,day) ) ## # A tibble: 336,776 × 7 ## year month day hour minute departure ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt; ## 1 2013 1 1 5 15 2013-01-01 05:15:00 ## 2 2013 1 1 5 29 2013-01-01 05:29:00 ## 3 2013 1 1 5 40 2013-01-01 05:40:00 ## 4 2013 1 1 5 45 2013-01-01 05:45:00 ## 5 2013 1 1 6 0 2013-01-01 06:00:00 ## 6 2013 1 1 5 58 2013-01-01 05:58:00 ## 7 2013 1 1 6 0 2013-01-01 06:00:00 ## 8 2013 1 1 6 0 2013-01-01 06:00:00 ## 9 2013 1 1 6 0 2013-01-01 06:00:00 ## 10 2013 1 1 6 0 2013-01-01 06:00:00 ## # … with 336,766 more rows, and 1 more variable: ## # date &lt;date&gt; 4.3.3 3.aus vorhandenene datetimes today() ## [1] &quot;2022-02-03&quot; as_datetime(today()) ## [1] &quot;2022-02-03 UTC&quot; weiter fancy sachen datetime &lt;- ymd_hms(&quot;20200914 151623&quot;) month(datetime) #ausgabe monat ## [1] 9 #ausgabe wochentag mit Parameter Montag als Anfang und Ausgabe des Namens wday(datetime, week_start = getOption(&quot;lubridate.week.start&quot; , 1), label = T) #ein montag ## [1] Mon ## 7 Levels: Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; ... &lt; Sun yday(datetime) #258 tag des jahres ## [1] 258 4.4 Aufgabenblatt 3 4.4.1 Aufgabe 1 load(&quot;data/starwars.RData&quot;) starwars %&gt;% dplyr::select(hair_color, skin_color, eye_color) %&gt;% summarize( h_length = mean(str_length(hair_color), na.rm = T), s_length = mean(str_length(skin_color), na.rm = T), e_length = mean(str_length(eye_color), na.rm = T), h_sd= sd(str_length(hair_color), na.rm = T), s_sd = sd(str_length(skin_color), na.rm = T), e_sd = sd(str_length(eye_color), na.rm = T), ) ## # A tibble: 1 × 6 ## h_length s_length e_length h_sd s_sd e_sd ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4.84 5.97 5.10 1.54 3.47 1.40 starwars %&gt;% mutate(hair_color = str_c(&quot;hair_color&quot;, hair_color, sep = &quot;:&quot;)) ## # A tibble: 87 × 16 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke S… 172 77 hair_color… fair blue ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red ## 4 Darth … 202 136 hair_color… white yellow ## 5 Leia O… 150 49 hair_color… light brown ## 6 Owen L… 178 120 hair_color… light blue ## 7 Beru W… 165 75 hair_color… light blue ## 8 R5-D4 97 32 &lt;NA&gt; white, red red ## 9 Biggs … 183 84 hair_color… light brown ## 10 Obi-Wa… 182 77 hair_color… fair blue-gray ## # … with 77 more rows, and 10 more variables: ## # birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, ## # star_string &lt;chr&gt;, films_low &lt;chr&gt; starwars %&gt;% unite(hair_color, eye_color, sep = &quot; and &quot;, col=&quot;combined&quot;) ## # A tibble: 87 × 15 ## name height mass combined skin_color birth_year ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Luke S… 172 77 blond and… fair 19 ## 2 C-3PO 167 75 NA and ye… gold 112 ## 3 R2-D2 96 32 NA and red white, bl… 33 ## 4 Darth … 202 136 none and … white 41.9 ## 5 Leia O… 150 49 brown and… light 19 ## 6 Owen L… 178 120 brown, gr… light 52 ## 7 Beru W… 165 75 brown and… light 47 ## 8 R5-D4 97 32 NA and red white, red NA ## 9 Biggs … 183 84 black and… light 24 ## 10 Obi-Wa… 182 77 auburn, w… fair 57 ## # … with 77 more rows, and 9 more variables: sex &lt;chr&gt;, ## # gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;, ## # films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;, ## # star_string &lt;chr&gt;, films_low &lt;chr&gt; #oder starwars %&gt;% mutate(combined2 = str_c(hair_color,eye_color, sep = &quot; and &quot;)) ## # A tibble: 87 × 17 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Sk… 172 77 blond fair blue ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red ## 4 Darth V… 202 136 none white yellow ## 5 Leia Or… 150 49 brown light brown ## 6 Owen La… 178 120 brown, gr… light blue ## 7 Beru Wh… 165 75 brown light blue ## 8 R5-D4 97 32 &lt;NA&gt; white, red red ## 9 Biggs D… 183 84 black light brown ## 10 Obi-Wan… 182 77 auburn, w… fair blue-gray ## # … with 77 more rows, and 11 more variables: ## # birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, ## # star_string &lt;chr&gt;, films_low &lt;chr&gt;, combined2 &lt;chr&gt; Option2 macht wenn in einer Zelle NA ist, automatisch das Ergebnis NA, Option1 verbindet das miteinander starwars %&gt;% mutate(short_hair = str_sub(hair_color, end = 2)) ## # A tibble: 87 × 17 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Sk… 172 77 blond fair blue ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red ## 4 Darth V… 202 136 none white yellow ## 5 Leia Or… 150 49 brown light brown ## 6 Owen La… 178 120 brown, gr… light blue ## 7 Beru Wh… 165 75 brown light blue ## 8 R5-D4 97 32 &lt;NA&gt; white, red red ## 9 Biggs D… 183 84 black light brown ## 10 Obi-Wan… 182 77 auburn, w… fair blue-gray ## # … with 77 more rows, and 11 more variables: ## # birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, ## # star_string &lt;chr&gt;, films_low &lt;chr&gt;, ## # short_hair &lt;chr&gt; starwars &lt;- starwars %&gt;% mutate( star_string = str_c( name, hair_color, eye_color, skin_color, homeworld, films, vehicles, starships, sep = &quot;,&quot;), films_low = str_to_lower(films) ) ## Warning in stri_c(..., sep = sep, collapse = collapse, ## ignore_null = TRUE): argument is not an atomic vector; ## coercing ## Warning in stri_c(..., sep = sep, collapse = collapse, ## ignore_null = TRUE): argument is not an atomic vector; ## coercing ## Warning in stri_c(..., sep = sep, collapse = collapse, ## ignore_null = TRUE): argument is not an atomic vector; ## coercing ## Warning in stri_trans_tolower(string, locale = locale): ## argument is not an atomic vector; coercing starwars %&gt;% mutate(films_low = str_remove(films_low, &quot;c&quot;) ) ## # A tibble: 87 × 16 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Sk… 172 77 blond fair blue ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red ## 4 Darth V… 202 136 none white yellow ## 5 Leia Or… 150 49 brown light brown ## 6 Owen La… 178 120 brown, gr… light blue ## 7 Beru Wh… 165 75 brown light blue ## 8 R5-D4 97 32 &lt;NA&gt; white, red red ## 9 Biggs D… 183 84 black light brown ## 10 Obi-Wan… 182 77 auburn, w… fair blue-gray ## # … with 77 more rows, and 10 more variables: ## # birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, ## # homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, ## # star_string &lt;chr&gt;, films_low &lt;chr&gt; starwars[str_detect(starwars$name, &quot;[:0-9]&quot;), ] ## # A tibble: 6 × 16 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 C-3PO 167 75 &lt;NA&gt; gold yellow ## 2 R2-D2 96 32 &lt;NA&gt; white, blue red ## 3 R5-D4 97 32 &lt;NA&gt; white, red red ## 4 IG-88 200 140 none metal red ## 5 R4-P17 96 NA none silver, red red, blue ## 6 BB8 NA NA none none black ## # … with 10 more variables: birth_year &lt;dbl&gt;, ## # sex &lt;chr&gt;, gender &lt;chr&gt;, homeworld &lt;chr&gt;, ## # species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt;, star_string &lt;chr&gt;, ## # films_low &lt;chr&gt; sum(str_detect(starwars$homeworld, &quot;[ment]$&quot;), na.rm = T) ## [1] 28 starwars[str_detect(starwars$starships, &#39;Millennium\\\\sFalcon&#39;), ] ## Warning in stri_detect_regex(string, pattern, negate = ## negate, opts_regex = opts(pattern)): argument is not an ## atomic vector; coercing ## # A tibble: 4 × 16 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Chewbacca 228 112 brown unknown blue ## 2 Han Solo 180 80 brown fair brown ## 3 Lando Ca… 177 79 black dark brown ## 4 Nien Nunb 160 68 none grey black ## # … with 10 more variables: birth_year &lt;dbl&gt;, ## # sex &lt;chr&gt;, gender &lt;chr&gt;, homeworld &lt;chr&gt;, ## # species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt;, star_string &lt;chr&gt;, ## # films_low &lt;chr&gt; 4.4.2 Aufgabe 2 hair_factor &lt;- as.factor(starwars$hair_color) hair_factor &lt;- tibble(hair_color = hair_factor) ggplot(hair_factor, aes(hair_color)) + geom_bar() #plot original freq &lt;- fct_infreq(hair_factor$hair_color) ggplot(hair_factor, aes(freq)) + geom_bar() levels(hair_factor) ## NULL hair_factor %&gt;% mutate(hair_color = fct_collapse(hair_color, brown = c(&quot;auburn&quot;, &quot;auburn, grey&quot;, &quot;auburn, white&quot;))) %&gt;% count(hair_color) ## # A tibble: 10 × 2 ## hair_color n ## &lt;fct&gt; &lt;int&gt; ## 1 brown 21 ## 2 black 13 ## 3 blond 3 ## 4 blonde 1 ## 5 brown, grey 1 ## 6 grey 1 ## 7 none 37 ## 8 unknown 1 ## 9 white 4 ## 10 &lt;NA&gt; 5 freq2 &lt;- fct_infreq(factor(starwars$eye_color)) freq2 &lt;- fct_lump(freq2, 6) #erste sechs als eigene , alles andere als &quot;Other&quot; zusammenfassen fct_count(freq2) ## # A tibble: 7 × 2 ## f n ## &lt;fct&gt; &lt;int&gt; ## 1 brown 21 ## 2 blue 19 ## 3 yellow 11 ## 4 black 10 ## 5 orange 8 ## 6 red 5 ## 7 Other 13 4.4.3 Aufgabe 3 #install.packages(&quot;devtools&quot;) library(devtools) #install_github(&quot;Ram-N/weatherData&quot;) library(weatherData) newyork &lt;- NewYork2013 library(lubridate) newyork$Time &lt;- as_datetime(newyork$Time) newyork$date &lt;- date(newyork$Time) newyork$year &lt;- year(newyork$Time) newyork$month &lt;- month(newyork$Time) newyork$day &lt;- day(newyork$Time) newyork$week &lt;- week(newyork$Time) newyork$year_day &lt;- yday(newyork$Time) newyork$week_day &lt;- wday(newyork$Time) newyork$hour &lt;- hour(newyork$Time) newyork[322,] ## Time Temperature date year ## 322 2013-01-13 01:47:00 42.8 2013-01-13 2013 ## month day week year_day week_day hour ## 322 1 13 2 13 1 1 filtered_newyork &lt;- newyork %&gt;% filter(month == 1, hour &gt; 1) ggplot(filtered_newyork, aes(x = week_day, y = Temperature, colour = factor(week))) + geom_line() "],["ggplot.html", "5 19.11.21 ggplot 5.1 Arten von Plots 5.2 aufgabe 2", " 5 19.11.21 ggplot Vorteil ggplot: nicht vordefinierte Grafiken, sondern Zusammensetzung vieler Layers 5.1 Arten von Plots library(tidyverse) starwars &lt;- starwars head(starwars) ## # A tibble: 6 × 16 ## name height mass hair_color skin_color eye_color ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Luke Sky… 172 77 blond fair blue ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red ## 4 Darth Va… 202 136 none white yellow ## 5 Leia Org… 150 49 brown light brown ## 6 Owen Lars 178 120 brown, gr… light blue ## # … with 10 more variables: birth_year &lt;dbl&gt;, ## # sex &lt;chr&gt;, gender &lt;chr&gt;, homeworld &lt;chr&gt;, ## # species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, ## # starships &lt;list&gt;, star_string &lt;chr&gt;, ## # films_low &lt;chr&gt; 5.1.1 Punktdiagramm ggplot(data =starwars, aes(x= height, y = mass, color = species)) + #aes = achsen / aestethics: welche achesn werden dargestellt geom_point() + #art des graphs facet_wrap(~gender) #facettierung = unterteilung des Plots ## Warning: Removed 28 rows containing missing values ## (geom_point). 5.1.2 Säulen: starwars %&gt;% ggplot( aes(x = hair_color, group = gender)) + #normal einfach nur das x auswählen geom_bar(aes(y = (..count../sum(..count..)))) + #hier special: die y-achse wir definiert als scale_y_continuous(labels = scales::percent) + #die y skala kriegt einen namen facet_wrap(~gender) #und es wird nach verschiedenen gruppen aufgeteilt 5.1.3 Histogramm #mit binwidth starwars %&gt;% filter(!is.na(height)) %&gt;% ggplot(aes(height)) + geom_histogram(binwidth = 25) #relative verteilung starwars %&gt;% filter(!is.na(height)) %&gt;% ggplot(aes(height)) + geom_histogram(aes(y = ..density..)) + #mit relativer Dichte: geom_density() + #verteilungslinie darüber xlab(&quot;Größe in cm&quot;) #label für die x achse ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. 5.1.4 Boxplot starwars %&gt;% filter (mass != max(mass, na.rm = T), !is.na(gender)) %&gt;% #größten Wert Jabba Hut rausfiltern ggplot( aes(y = mass, x = gender)) + geom_boxplot() # mit arithm. Mittel als Punkt starwars %&gt;% filter (mass != max(mass, na.rm = T), !is.na(gender)) %&gt;% #größten Wert Jabba Hut rausfiltern ggplot( aes(y = mass, x = gender)) + geom_boxplot() + geom_point(stat = &quot;summary&quot;, fun = &quot;mean&quot;, colour = &quot;blue&quot;, na.rm = T) 5.1.5 Violin starwars %&gt;% filter (mass != max(mass, na.rm = T), !is.na(gender)) %&gt;% #größten Wert Jabba Hut rausfiltern ggplot(aes(y = mass, x = gender)) + geom_violin() ## Aufgaben library(tidyverse) library(MASS) library(datasets) library(timetk) library(lubridate) library(robustbase) library(usmap) library(GGally) library(ggpubr) library(directlabels) library(nlme) 5.1.6 1a) deaths &lt;- USAccDeaths deaths &lt;- tk_tbl(deaths) ggplot(deaths, aes(index, value)) + geom_line() + xlab(&quot;Time&quot;) + ylab(&quot;Accidental Deaths&quot;) 5.1.7 1b) Animals %&gt;% ggplot(aes(body, brain, label = rownames(Animals))) + geom_point() + geom_text(hjust = &quot;left&quot;, vjust = &quot;bottom&quot;, nudge_x = 0.05) + #adjust text position scale_y_log10() + scale_x_log10() + xlab(&quot;Logarithmiertes Körpergewicht&quot;) + ylab(&quot;Logarithmiertes Gehirngewicht&quot;) 5.1.8 1c) animals &lt;- Animals animals$brain &lt;- log(Animals$brain) animals$body &lt;- log(Animals$body) animals %&gt;% ggplot(aes(body,brain, label= rownames(Animals))) + geom_point() + geom_smooth(method = &quot;lmrob&quot;, color = &quot;red&quot;) + geom_smooth(method = &quot;lm&quot;) + geom_text(hjust = &quot;left&quot;, vjust = &quot;bottom&quot;, nudge_x = 0.05) + #adjust text position xlab(&quot;Logarithmiertes Körpergewicht&quot;) + ylab(&quot;Logarithmiertes Gehirngewicht&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.1.9 1d) mpg %&gt;% ggplot(aes(displ, hwy, color = class, label= class)) + geom_point() + geom_smooth(mapping = aes(displ, hwy), method = &quot;lm&quot;, inherit.aes = F) + geom_dl( method = &quot;smart.grid&quot;) # positiionign smartly in middle of points with method smart.grid ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.1.10 1e) boys &lt;- Oxboys boys %&gt;% ggplot(aes( age,height, group = Subject)) + geom_line() + geom_smooth(method = &quot;lm&quot;, se = F, mapping = aes(age,height), inherit.aes = F) ## `geom_smooth()` using formula &#39;y ~ x&#39; # with custom mapping to take all 5.1.11 1f) deaths &lt;- USAccDeaths deaths &lt;- tk_tbl(deaths) deaths$year &lt;- factor(year(deaths$index)) deaths$month &lt;- factor(month(deaths$index)) deaths$month &lt;- fct_recode(deaths$month, &quot;Jan&quot; = &quot;1&quot;, &quot;Feb&quot; = &quot;2&quot;, &quot;Mar&quot; = &quot;3&quot;, &quot;Apr&quot;= &quot;4&quot;,&quot;Mai&quot; = &quot;5&quot;, &quot;Jun&quot;= &quot;6&quot;, &quot;Jul&quot;=&quot;7&quot;,&quot;Aug&quot; = &quot;8&quot;, &quot;Sep&quot;=&quot;9&quot;, &quot;Oct&quot;=&quot;10&quot;, &quot;Nov&quot;=&quot;11&quot;, &quot;Dez&quot;=&quot;12&quot; ) deaths %&gt;% ggplot(aes(month, value, group = year, color = year)) + geom_line() 5.1.12 1g) eco &lt;- economics presidential &lt;- subset(presidential, start &gt; economics$date[1]) eco %&gt;% ggplot()+ #alle farbsachen der präsidenten geom_rect(aes(xmin = start, xmax = end, fill = party), ymin = -Inf, ymax = Inf, alpha = 0.5, data = presidential) + geom_vline(aes(xintercept = as.numeric(start)), data = presidential, colour = &quot;grey50&quot;, alpha = 0.3) + geom_text(aes(x = start, y = 2500, label = name), data = presidential, size = 3, vjust = 0, hjust = 0, nudge_x = 50)+ scale_fill_manual(values=c(&quot;blue&quot;, &quot;red&quot;)) + #farbwechsel geom_line(aes(date,unemploy)) + #die linie xlab(&quot;Year&quot;) + ylab(&quot;Number of unemployed in thousand&quot;) 5.2 aufgabe 2 5.2.1 2a) mtcars %&gt;% ggplot(aes(cyl)) + geom_histogram(aes(y=..density..),binwidth = 2,) + facet_wrap(~am) 5.2.2 2f) usa &lt;- tibble(USArrests) %&gt;% mutate(state = rownames(USArrests)) plot_usmap(data = usa, regions = &quot;state&quot;, values = &quot;Murder&quot;, color = &quot;red&quot;) + scale_fill_continuous(name = &quot;Murder&quot;, ) "],["schleifen.html", "6 26.11.21 Schleifen 6.1 if else 6.2 repeat 6.3 while 6.4 for 6.5 apply 6.6 funktionen 6.7 Aufgabenblatt", " 6 26.11.21 Schleifen library(&quot;tidyverse&quot;) library(reticulate) use_python(&quot;/usr/local/bin/python3&quot;) 6.1 if else x &lt;- 5 if(x==5) &quot;Hallo&quot; else &quot;Ciao&quot; ## [1] &quot;Hallo&quot; if (x == 3) { print(&quot;lol&quot;) } else { print(&quot;not lol&quot;) } ## [1] &quot;not lol&quot; 6.2 repeat i &lt;- 1 repeat { print(i) i &lt;- i+1 if (i==14) break } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 ## [1] 11 ## [1] 12 ## [1] 13 6.3 while i &lt;- 1 while (i &lt; 3) { i &lt;- i+1 print(mean(sample(0:50,10))) } ## [1] 28.2 ## [1] 21.7 6.4 for i &lt;- 1 for (i in 1:5) { print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 for (i in 4:9) print(i) ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 6.4.1 i in m: m kann beliebig sein m &lt;- c(1:7, 640:643) for (i in m) { print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 640 ## [1] 641 ## [1] 642 ## [1] 643 6.4.2 praktische Anwendung: Validierung ## Warning in mean.default(res_train): argument is not ## numeric or logical: returning NA ## [1] NA ## Warning in mean.default(res_valid, na.rm = T): argument ## is not numeric or logical: returning NA ## [1] NA 6.5 apply x &lt;- matrix(1:10, ncol = 2) apply(x, 1, max) # maximum jeder Zeile (margin = dimension) ## [1] 6 7 8 9 10 6.6 funktionen definition einer Funktion, die uns Mittelwert+ SD ausgibt mittel_sd &lt;- function(x) { if (is.na(mean(x))) { mittel_sd &lt;- &quot;Überprüfen sie den Vektor!&quot; } else { mittel_sd &lt;- c(Mittelwert = mean(x), Standardabweichung = sd(x)) } return(mittel_sd) } mittel_sd(starwars$height[!is.na(starwars$height)]) ## Mittelwert Standardabweichung ## 174.35802 34.77043 confidence_interval &lt;- function(vector, interval, na_do = T) { #vorfestgelegter Wert für na_do # 1. standardabweichung der stichprobe vec_sd &lt;- sd(vector, na.rm = na_do) # 2. Stichprobenumfang n &lt;- length(vector) # 3. Mittelwert vec_mean &lt;- mean(vector, na.rm = na_do) # 4.Quantil der t-Verteilung se &lt;- qt((interval +1 )/2, df = (n-1)*vec_sd/sqrt(n)) # berechnung Konfidenz Intervall result &lt;- c(&quot;lower&quot; = vec_mean -se, &quot;upper&quot; = vec_mean + se) return(result) } confidence_interval(starwars$height, 0.95) ## lower upper ## 172.3906 176.3254 6.7 Aufgabenblatt library(tidyverse) 6.7.1 a) i &lt;- 1 repeat { print(mean(sample(0:50,10))) i &lt;- i+1 if (i==10) break } ## [1] 24.9 ## [1] 26.4 ## [1] 32.5 ## [1] 20.1 ## [1] 31.1 ## [1] 23.4 ## [1] 27 ## [1] 22.6 ## [1] 25.4 6.7.2 b) i &lt;- 0 while (i &lt;= 10) { print(mean(sample(0:50,10))) i &lt;- i+1 } ## [1] 23.2 ## [1] 32.3 ## [1] 22.9 ## [1] 20.7 ## [1] 27.3 ## [1] 28.7 ## [1] 28.7 ## [1] 26.4 ## [1] 19.3 ## [1] 27.4 ## [1] 30 6.7.3 c) for (i in 1:10) { print(mean(sample(0:50,10))) } ## [1] 23.4 ## [1] 32.3 ## [1] 28.8 ## [1] 30.3 ## [1] 27.9 ## [1] 20.9 ## [1] 28.6 ## [1] 27.7 ## [1] 31.4 ## [1] 14.2 6.7.4 d) norm &lt;- rnorm(1000, mean = 100, sd = 25) norm_matrix &lt;- matrix(norm, ncol = 20) for (i in 20:22) { for (j in 5:7) { print(norm_matrix[i,j]) } print(&quot;--&quot;) } ## [1] 103.8033 ## [1] 59.40344 ## [1] 89.47627 ## [1] &quot;--&quot; ## [1] 80.8743 ## [1] 149.3586 ## [1] 136.7231 ## [1] &quot;--&quot; ## [1] 77.39322 ## [1] 104.8006 ## [1] 93.5635 ## [1] &quot;--&quot; 6.7.5 e) norm_vector &lt;- rnorm(1000,100,33) average &lt;- vector() for (i in 1:length(norm_vector)) { mean_vec &lt;- mean(sample(norm_vector, 400)) average &lt;- append(average,mean_vec) } mean(average) ## [1] 100.7124 6.7.6 f) wurf &lt;- function(x, M) { avg_vector &lt;- vector() for (i in 1:M) { samp &lt;- sample(c(&quot;Kopf&quot;, &quot;Zahl&quot;), x, replace = T) avg_vector &lt;- append(avg_vector, sum(samp==&quot;Kopf&quot;)) } return(mean(avg_vector)) } wurf(100,10) ## [1] 52.9 6.7.7 g) 6.7.8 h) corr &lt;- function(x,y){ #Test if (!(is.numeric(x) | !is.numeric(y))) { return(&quot;Ein Wert ist nicht numerisch&quot;) } corr &lt;- cor.test(x,y, method= &quot;pearson&quot;) df &lt;- data.frame(x,y) lin &lt;- lm(x~y,df) return(list(corr$estimate,lin)) } corr(1:10, 10:1) ## [[1]] ## cor ## -1 ## ## [[2]] ## ## Call: ## lm(formula = x ~ y, data = df) ## ## Coefficients: ## (Intercept) y ## 11 -1 6.7.9 i) “Schreiben Sie eine Schleife, die zwei Würfel M-mal rollt und deren Summe berechnet. Im Anschluss soll die erwartete Summe der beiden Würfel ausgegeben werden. Je größer M, desto mehr sollte sich die erwartete Augensumme der theoretischen, erwarteten Augensumme anpassen.” (Was ist mit markiertem Teil gemeint?) M &lt;- 10 for (i in 1:M) { würfel1 &lt;- sample(1:6,1) würfel2 &lt;- sample(1:6,1) summe1 &lt;- würfel1 + würfel2 } 6.7.10 j) library(MASS) apply(Animals,2, FUN=mean) ## body brain ## 4278.4388 574.5214 6.7.11 k) apply(Animals[1],1, FUN=mean) ## Mountain beaver Cow Grey wolf ## 1.350 465.000 36.330 ## Goat Guinea pig Dipliodocus ## 27.660 1.040 11700.000 ## Asian elephant Donkey Horse ## 2547.000 187.100 521.000 ## Potar monkey Cat Giraffe ## 10.000 3.300 529.000 ## Gorilla Human African elephant ## 207.000 62.000 6654.000 ## Triceratops Rhesus monkey Kangaroo ## 9400.000 6.800 35.000 ## Golden hamster Mouse Rabbit ## 0.120 0.023 2.500 ## Sheep Jaguar Chimpanzee ## 55.500 100.000 52.160 ## Rat Brachiosaurus Mole ## 0.280 87000.000 0.122 ## Pig ## 192.000 "],["clusteranalyse.html", "7 06.12.21 Clusteranalyse 7.1 Datensatz Tidyr 7.2 Deskription 7.3 hierarchsiche Clusteranalyse 7.4 partitionierende Clusteranalyse 7.5 Aufgabenblatt", " 7 06.12.21 Clusteranalyse library(tidyverse) library(GGally) library(ggpubr) 7.1 Datensatz Tidyr arrests &lt;- tibble(USArrests) 7.1.1 Umformung arrests &lt;- arrests %&gt;% mutate(state = rownames(USArrests)) 7.2 Deskription 7.2.1 kurze Analyse arrests %&gt;% summarise( avg_murder = mean(Murder), sd_murder = sd(Murder), avg_assault = mean(Assault), sd_assault = sd(Assault), avg_pop = mean(UrbanPop), sd_pop = sd(UrbanPop), avg_rape = mean(Rape), sd_rape = sd(Rape) ) ## # A tibble: 1 × 8 ## avg_murder sd_murder avg_assault sd_assault avg_pop ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 7.79 4.36 171. 83.3 65.5 ## # … with 3 more variables: sd_pop &lt;dbl&gt;, ## # avg_rape &lt;dbl&gt;, sd_rape &lt;dbl&gt; 7.2.2 Zusammenhänge arrests %&gt;% ggpairs(columns = c(&quot;Murder&quot;, &quot;Assault&quot;, &quot;UrbanPop&quot;, &quot;Rape&quot;)) ## plot: [1,1] [=&gt;------------------------] 6% est: 0s ## plot: [1,2] [==&gt;-----------------------] 12% est: 1s ## plot: [1,3] [====&gt;---------------------] 19% est: 1s ## plot: [1,4] [=====&gt;--------------------] 25% est: 1s ## plot: [2,1] [=======&gt;------------------] 31% est: 1s ## plot: [2,2] [=========&gt;----------------] 38% est: 1s ## plot: [2,3] [==========&gt;---------------] 44% est: 1s ## plot: [2,4] [============&gt;-------------] 50% est: 0s ## plot: [3,1] [==============&gt;-----------] 56% est: 0s ## plot: [3,2] [===============&gt;----------] 62% est: 0s ## plot: [3,3] [=================&gt;--------] 69% est: 0s ## plot: [3,4] [===================&gt;------] 75% est: 0s ## plot: [4,1] [====================&gt;-----] 81% est: 0s ## plot: [4,2] [======================&gt;---] 88% est: 0s ## plot: [4,3] [=======================&gt;--] 94% est: 0s ## plot: [4,4] [==========================]100% est: 0s 7.3 hierarchsiche Clusteranalyse wichtig: - Standardisierung der Variablen - nur für metrisch skalierte Variablen Vorbereitung # Standardisierung st_arrest &lt;- scale(arrests[,-5]) #alle außer die states # Distanzmatrix (euklidisches Maß) eu_dist &lt;- dist(st_arrest) Clusterisierung h_eu_compl &lt;- hclust(eu_dist) h_eu_compl$labels &lt;- arrests$state Darstellung mit Dendrogrammen plot(h_eu_compl, hang = -1) =&gt; vermutlich beste Clusteranzahl = 4 7.4 partitionierende Clusteranalyse k2 &lt;- kmeans(st_arrest[,1:2], centers = 4, nstart = 50) arrests %&gt;% mutate(cluster = k2$cluster) %&gt;% ggplot(aes(Assault, Murder, color = factor(cluster))) + geom_point() + geom_text(aes(label = state), hjust = -0.1) 7.5 Aufgabenblatt Biathlon Datensatz importe: library(tidyverse) library(GGally) library(ggpubr) Datensatz einlesen load(&quot;data/biathlon3.RData&quot;) head(df.biathlon3,1) %&gt;% t() ## 1 ## nation &quot;FRA&quot; ## gender &quot;M&quot; ## competition &quot;I&quot; ## type &quot;W&quot; ## total.time &quot;2667.9&quot; ## course.lap.1 &quot;486.6&quot; ## course.lap.2 &quot;482.8&quot; ## course.lap.3 &quot;481.9&quot; ## course.lap.4 &quot;484.6&quot; ## course.lap.5 &quot;480.7&quot; ## course.total &quot;2416.6&quot; ## shoot.times.1 &quot;26&quot; ## shoot.times.2 &quot;23&quot; ## shoot.times.3 &quot;36&quot; ## shoot.times.4 &quot;32&quot; ## shoot.times.total &quot;117&quot; ## fails.1 &quot;0&quot; ## fails.2 &quot;0&quot; ## fails.3 &quot;0&quot; ## fails.4 &quot;1&quot; ## fails.total &quot;1&quot; a) Betrachtung des Datensatzes library(pastecs) df.biathlon3 %&gt;% dplyr::select(course.lap.1:shoot.times.total) %&gt;% stat.desc(basic=F) %&gt;% t() %&gt;% as.data.frame() ## median mean SE.mean ## course.lap.1 415.2 414.78749 1.23440998 ## course.lap.2 427.1 428.50839 1.27495791 ## course.lap.3 425.3 431.12730 1.31816930 ## course.lap.4 390.9 421.09404 2.26134803 ## course.lap.5 380.9 408.46061 2.16532519 ## course.total 1556.7 1701.83214 8.32654983 ## shoot.times.1 31.0 31.86822 0.08935101 ## shoot.times.2 29.8 30.48364 0.09726272 ## shoot.times.3 29.5 30.35905 0.14662694 ## shoot.times.4 27.6 28.36341 0.13297238 ## shoot.times.total 95.0 92.60725 0.53834769 ## CI.mean.0.95 var std.dev ## course.lap.1 2.4202103 5503.85004 74.187937 ## course.lap.2 2.4997094 5871.36979 76.624864 ## course.lap.3 2.5844306 6276.10397 79.221865 ## course.lap.4 4.4350467 9516.58623 97.552992 ## course.lap.5 4.2467229 8725.54638 93.410633 ## course.total 16.3252098 250425.13259 500.424952 ## shoot.times.1 0.1751835 28.83677 5.369988 ## shoot.times.2 0.1906953 34.16965 5.845481 ## shoot.times.3 0.2875707 40.01049 6.325385 ## shoot.times.4 0.2607908 32.90556 5.736337 ## shoot.times.total 1.0554959 1046.82348 32.354652 ## coef.var ## course.lap.1 0.1788577 ## course.lap.2 0.1788177 ## course.lap.3 0.1837552 ## course.lap.4 0.2316656 ## course.lap.5 0.2286895 ## course.total 0.2940507 ## shoot.times.1 0.1685061 ## shoot.times.2 0.1917580 ## shoot.times.3 0.2083525 ## shoot.times.4 0.2022443 ## shoot.times.total 0.3493749 df.biathlon3$type &lt;- factor(df.biathlon3$type) df.biathlon3$competition &lt;- factor(df.biathlon3$competition) summary(df.biathlon3$competition) ## I M P S ## 589 360 912 1751 summary(df.biathlon3$type) ## O W ## 525 3087 df.biathlon3 %&gt;% ggplot(aes(x= course.total, y= shoot.times.total,color=competition)) + geom_point() # facet_wrap(~gender) b) library(patchwork) df_laps &lt;- df.biathlon3 %&gt;% dplyr::select(course.lap.1:course.lap.5) df_shoots &lt;- df.biathlon3 %&gt;% dplyr::select(shoot.times.1:shoot.times.4) df_fails &lt;- dplyr::select(df.biathlon3, fails.1:fails.4) p1 &lt;- ggplot(stack(df_laps), aes(x = ind, y = values)) + geom_boxplot() p2 &lt;- ggplot(stack(df_shoots), aes(x = ind, y = values)) + geom_boxplot() p1 / p2 ## Warning: Removed 3502 rows containing non-finite values ## (stat_boxplot). ## Warning: Removed 3502 rows containing non-finite values ## (stat_boxplot). ggplot(df.biathlon3, aes(x=fails.total)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value ## with `binwidth`. c) auwahl, standardisierung st_df &lt;- df.biathlon3 %&gt;% dplyr::select(course.total, shoot.times.total, fails.total) %&gt;% scale() # mutate(comp = competition) plot(hclust(dist(st_df))) k &lt;- kmeans(st_df[,1:2], centers = 4, nstart = 50) p1 &lt;- ggplot(df.biathlon3, aes(course.total, shoot.times.total)) + geom_point(aes(color=factor(k$cluster))) + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Cluster&quot;) p2 &lt;- ggplot(df.biathlon3, aes(course.total, shoot.times.total)) + geom_point(aes(color=competition)) + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Comp&quot;) p1 + p2 "],["lineare-regression.html", "8 13.12.21 Lineare Regression 8.1 Packages 8.2 Datensatz Deskription 8.3 Regressionsanalyse (explorativ) 8.4 Aufgabenblatt 8.5 Lineares Modell", " 8 13.12.21 Lineare Regression 8.1 Packages library(tidyverse) 8.2 Datensatz Deskription starwars &lt;- starwars 8.2.1 Beschreibung # Augenfarbe ~ Masse starwars %&gt;% group_by(eye_color) %&gt;% summarize( avg_mass = mean(mass, na.rm = T) ) ## # A tibble: 15 × 2 ## eye_color avg_mass ## &lt;chr&gt; &lt;dbl&gt; ## 1 black 76.3 ## 2 blue 86.5 ## 3 blue-gray 77 ## 4 brown 66.1 ## 5 dark NaN ## 6 gold NaN ## 7 green, yellow 159 ## 8 hazel 66 ## 9 orange 282. ## 10 pink NaN ## 11 red 81.4 ## 12 red, blue NaN ## 13 unknown 31.5 ## 14 white 48 ## 15 yellow 81.1 # 5-Punkte (nach Gewicht) starwars %&gt;% group_by(gender) %&gt;% filter(!is.na(height)) %&gt;% summarize( min_height = min(height), q1_height = quantile(height,0.25), med_height = quantile(height,0.5), q3_height = quantile(height, 0.75), max_height = max(height) ) ## # A tibble: 3 × 6 ## gender min_height q1_height med_height q3_height ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 feminine 96 162. 166. 172 ## 2 masculine 66 171. 183 193 ## 3 &lt;NA&gt; 178 180. 183 183 ## # … with 1 more variable: max_height &lt;int&gt; 8.2.2 Visualisieren #erstmal eindeutschen starwars %&gt;% mutate(gender = fct_recode(gender, &quot;Männlich&quot; = &quot;masculine&quot;, &quot;Weiblich&quot; = &quot;feminine&quot;, &quot;nichts&quot; = &quot;NA&quot; )) %&gt;% ggplot(aes(height, gender)) + geom_boxplot(na.rm = T) + geom_point(stat= &quot;summary&quot;, fun = &quot;mean&quot;, color = &quot;red&quot;) + xlab(&quot;Größe in cm&quot;)+ ylab(&quot;Geschlecht&quot;) + ggtitle(&quot;Boxplot der Größenverteilung nach Geschlecht&quot;) ## Warning: Unknown levels in `f`: NA ## Warning: Removed 6 rows containing non-finite values ## (stat_summary). 8.3 Regressionsanalyse (explorativ) diamonds &lt;- diamonds summary(diamonds) ## carat cut color ## Min. :0.2000 Fair : 1610 D: 6775 ## 1st Qu.:0.4000 Good : 4906 E: 9797 ## Median :0.7000 Very Good:12082 F: 9542 ## Mean :0.7979 Premium :13791 G:11292 ## 3rd Qu.:1.0400 Ideal :21551 H: 8304 ## Max. :5.0100 I: 5422 ## J: 2808 ## clarity depth table ## SI1 :13065 Min. :43.00 Min. :43.00 ## VS2 :12258 1st Qu.:61.00 1st Qu.:56.00 ## SI2 : 9194 Median :61.80 Median :57.00 ## VS1 : 8171 Mean :61.75 Mean :57.46 ## VVS2 : 5066 3rd Qu.:62.50 3rd Qu.:59.00 ## VVS1 : 3655 Max. :79.00 Max. :95.00 ## (Other): 2531 ## price x y ## Min. : 326 Min. : 0.000 Min. : 0.000 ## 1st Qu.: 950 1st Qu.: 4.710 1st Qu.: 4.720 ## Median : 2401 Median : 5.700 Median : 5.710 ## Mean : 3933 Mean : 5.731 Mean : 5.735 ## 3rd Qu.: 5324 3rd Qu.: 6.540 3rd Qu.: 6.540 ## Max. :18823 Max. :10.740 Max. :58.900 ## ## z ## Min. : 0.000 ## 1st Qu.: 2.910 ## Median : 3.530 ## Mean : 3.539 ## 3rd Qu.: 4.040 ## Max. :31.800 ## diamonds %&gt;% ggplot(aes(carat,price)) + geom_point() diamonds %&gt;% filter(!is.na(price)) %&gt;% ggplot(aes(color, price)) + geom_boxplot() + geom_point(stat=&quot;summary&quot;, fun=mean, color=&quot;red&quot;) 8.3.1 die Regression! # Zusammenhang Preis Carat m0 &lt;- lm(price ~ carat, data = diamonds) summary(m0) ## ## Call: ## lm(formula = price ~ carat, data = diamonds) ## ## Residuals: ## Min 1Q Median 3Q Max ## -18585.3 -804.8 -18.9 537.4 12731.7 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -2256.36 13.06 -172.8 &lt;2e-16 *** ## carat 7756.43 14.07 551.4 &lt;2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1549 on 53938 degrees of freedom ## Multiple R-squared: 0.8493, Adjusted R-squared: 0.8493 ## F-statistic: 3.041e+05 on 1 and 53938 DF, p-value: &lt; 2.2e-16 plot(m0) m1 &lt;- lm(log(price) ~carat, data = diamonds) summary(m1) ## ## Call: ## lm(formula = log(price) ~ carat, data = diamonds) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.2844 -0.2449 0.0335 0.2578 1.5642 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.215021 0.003348 1856 &lt;2e-16 *** ## carat 1.969757 0.003608 546 &lt;2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3972 on 53938 degrees of freedom ## Multiple R-squared: 0.8468, Adjusted R-squared: 0.8468 ## F-statistic: 2.981e+05 on 1 and 53938 DF, p-value: &lt; 2.2e-16 #lineares modell mit polynomen m2 &lt;- lm(log(price) ~ I(poly(carat, degree = 3)), data = diamonds) summary(m2) ## ## Call: ## lm(formula = log(price) ~ I(poly(carat, degree = 3)), data = diamonds) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.06032 -0.17452 0.00001 0.17349 1.27814 ## ## Coefficients: ## Estimate Std. Error ## (Intercept) 7.78677 0.00111 ## I(poly(carat, degree = 3))1 216.84668 0.25786 ## I(poly(carat, degree = 3))2 -67.76529 0.25786 ## I(poly(carat, degree = 3))3 18.16637 0.25786 ## t value Pr(&gt;|t|) ## (Intercept) 7013.42 &lt;2e-16 *** ## I(poly(carat, degree = 3))1 840.95 &lt;2e-16 *** ## I(poly(carat, degree = 3))2 -262.80 &lt;2e-16 *** ## I(poly(carat, degree = 3))3 70.45 &lt;2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.2579 on 53936 degrees of freedom ## Multiple R-squared: 0.9354, Adjusted R-squared: 0.9354 ## F-statistic: 2.604e+05 on 3 and 53936 DF, p-value: &lt; 2.2e-16 plot(m2) 8.4 Aufgabenblatt library(tidyverse) swiss &lt;- swiss # a) summary(swiss) ## Fertility Agriculture Examination ## Min. :35.00 Min. : 1.20 Min. : 3.00 ## 1st Qu.:64.70 1st Qu.:35.90 1st Qu.:12.00 ## Median :70.40 Median :54.10 Median :16.00 ## Mean :70.14 Mean :50.66 Mean :16.49 ## 3rd Qu.:78.45 3rd Qu.:67.65 3rd Qu.:22.00 ## Max. :92.50 Max. :89.70 Max. :37.00 ## Education Catholic Infant.Mortality ## Min. : 1.00 Min. : 2.150 Min. :10.80 ## 1st Qu.: 6.00 1st Qu.: 5.195 1st Qu.:18.15 ## Median : 8.00 Median : 15.140 Median :20.00 ## Mean :10.98 Mean : 41.144 Mean :19.94 ## 3rd Qu.:12.00 3rd Qu.: 93.125 3rd Qu.:21.70 ## Max. :53.00 Max. :100.000 Max. :26.60 # b) # Streuung ggplot(stack(swiss), aes(ind, values)) + geom_boxplot() + geom_point(stat=&quot;summary&quot;, fun=&quot;mean&quot;, color= &quot;red&quot;) library(GGally) ggpairs(swiss) ## plot: [1,1] [&gt;-------------------------] 3% est: 0s ## plot: [1,2] [&gt;-------------------------] 6% est: 1s ## plot: [1,3] [=&gt;------------------------] 8% est: 2s ## plot: [1,4] [==&gt;-----------------------] 11% est: 2s ## plot: [1,5] [===&gt;----------------------] 14% est: 2s ## plot: [1,6] [===&gt;----------------------] 17% est: 2s ## plot: [2,1] [====&gt;---------------------] 19% est: 2s ## plot: [2,2] [=====&gt;--------------------] 22% est: 2s ## plot: [2,3] [=====&gt;--------------------] 25% est: 2s ## plot: [2,4] [======&gt;-------------------] 28% est: 2s ## plot: [2,5] [=======&gt;------------------] 31% est: 2s ## plot: [2,6] [========&gt;-----------------] 33% est: 2s ## plot: [3,1] [========&gt;-----------------] 36% est: 2s ## plot: [3,2] [=========&gt;----------------] 39% est: 2s ## plot: [3,3] [==========&gt;---------------] 42% est: 1s ## plot: [3,4] [===========&gt;--------------] 44% est: 1s ## plot: [3,5] [===========&gt;--------------] 47% est: 1s ## plot: [3,6] [============&gt;-------------] 50% est: 1s ## plot: [4,1] [=============&gt;------------] 53% est: 1s ## plot: [4,2] [=============&gt;------------] 56% est: 1s ## plot: [4,3] [==============&gt;-----------] 58% est: 1s ## plot: [4,4] [===============&gt;----------] 61% est: 1s ## plot: [4,5] [================&gt;---------] 64% est: 1s ## plot: [4,6] [================&gt;---------] 67% est: 1s ## plot: [5,1] [=================&gt;--------] 69% est: 1s ## plot: [5,2] [==================&gt;-------] 72% est: 1s ## plot: [5,3] [===================&gt;------] 75% est: 1s ## plot: [5,4] [===================&gt;------] 78% est: 1s ## plot: [5,5] [====================&gt;-----] 81% est: 0s ## plot: [5,6] [=====================&gt;----] 83% est: 0s ## plot: [6,1] [=====================&gt;----] 86% est: 0s ## plot: [6,2] [======================&gt;---] 89% est: 0s ## plot: [6,3] [=======================&gt;--] 92% est: 0s ## plot: [6,4] [========================&gt;-] 94% est: 0s ## plot: [6,5] [========================&gt;-] 97% est: 0s ## plot: [6,6] [==========================]100% est: 0s 8.5 Lineares Modell benötigt: passende Variablen Methodne zur Variablenselektion hier S. 96 Vorwärtsverfahren: - Variable mit höchster Korrelation auswählen und R^2 testen - immer weiter Variablen hinzufügen und R^2 testen - solange R^2 Veränderung signifikant ist : weitermachen # education model &lt;- lm(Fertility ~ Education, data= swiss) summary(model)$r.squared ## [1] 0.4406156 # R^2 = 0.44 R^2 hier nur 44% (44% der Variation kann dadurch erklärt werden) -&gt; multi lineares Modell testen mit weiteren Variabln # weitere Variable Catholic model2 &lt;- lm(Fertility ~ Education+Catholic, data= swiss) summary(model2)$r.squared ## [1] 0.5745071 # R^2 =&gt; 0.57 # delta R^2 = 0.11 (gut!) # Agriculture model3 &lt;- lm(Fertility ~ Education+Catholic+Agriculture, data= swiss) summary(model3)$r.squared ## [1] 0.6422541 # R^2 = 0.64 # delta R^2 = 0,07 (auch gut!) model4 &lt;- lm(Fertility ~ Education+Catholic+Agriculture+Examination, data= swiss) summary(model4)$r.squared ## [1] 0.6497897 # r^2 ändert sich fast nicht also Model3 oder model2 plot(model2) #besser bei panel 2+4 plot(model3) m1 &lt;- lm(log(Fertility) ~ Education, data= swiss) summary(m1) ## ## Call: ## lm(formula = log(Fertility) ~ Education, data = swiss) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.25727 -0.08868 -0.04285 0.12762 0.24865 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.396825 0.030110 146.024 &lt; 2e-16 *** ## Education -0.014919 0.002073 -7.198 5.2e-09 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.1352 on 45 degrees of freedom ## Multiple R-squared: 0.5351, Adjusted R-squared: 0.5248 ## F-statistic: 51.8 on 1 and 45 DF, p-value: 5.195e-09 # r^2 0.57 &gt; 0.44 plot(m1) m2 &lt;- lm(log(Fertility) ~ Education+Catholic, data= swiss) summary(m2)$r.squared #r^2 = 0.61 &gt; 0.57 ## [1] 0.6163616 plot(m2) m3 &lt;- lm(Fertility ~ Education+Catholic+Agriculture, data= swiss) summary(m3)$r.squared ## [1] 0.6422541 library(robustbase) ?lmrob model_robust &lt;- lmrob(log(Fertility) ~ Education, data= swiss) summary(model_robust) ## ## Call: ## lmrob(formula = log(Fertility) ~ Education, data = swiss) ## \\--&gt; method = &quot;MM&quot; ## Residuals: ## Min 1Q Median 3Q Max ## -0.25564 -0.08674 -0.04180 0.12940 0.25139 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.396133 0.029191 150.60 &lt; 2e-16 *** ## Education -0.015075 0.002013 -7.49 1.92e-09 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Robust residual standard error: 0.1471 ## Multiple R-squared: 0.5152, Adjusted R-squared: 0.5044 ## Convergence in 7 IRWLS iterations ## ## Robustness weights: ## one weight is ~= 1. The remaining 46 ones are summarized as ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.7438 0.8798 0.9614 0.9276 0.9890 0.9987 ## Algorithmic parameters: ## tuning.chi bb tuning.psi ## 1.548e+00 5.000e-01 4.685e+00 ## refine.tol rel.tol scale.tol ## 1.000e-07 1.000e-07 1.000e-10 ## solve.tol eps.outlier eps.x ## 1.000e-07 2.128e-03 9.641e-11 ## warn.limit.reject warn.limit.meanrw ## 5.000e-01 5.000e-01 ## nResample max.it best.r.s ## 500 50 2 ## k.fast.s k.max maxit.scale ## 1 200 200 ## trace.lev mts compute.rd ## 0 1000 0 ## fast.s.large.n ## 2000 ## psi subsampling ## &quot;bisquare&quot; &quot;nonsingular&quot; ## cov compute.outlier.stats ## &quot;.vcov.avar1&quot; &quot;SM&quot; ## seed : int(0) #R^2 = 0.51 &gt; 0.57 von davor Berechnung (aus lmrob) : MM-type Methode im Gegensatz zur least-squares Methode verbessert R^2 Ergebnis aber nicht, und Rest kann ich nicht bewerten "],["maschinelles-lernen-data-mining.html", "9 18.01.22 Maschinelles Lernen / Data Mining 9.1 Import all packages 9.2 Datensatz einlesen 9.3 Lineare Diskriminanzanalyse 9.4 Random Forest Methode 9.5 Neuronales Netzwerk 9.6 H20 9.7 Aufgabenblatt", " 9 18.01.22 Maschinelles Lernen / Data Mining =&gt; Lösen von Klassifikationsproblemen 9.1 Import all packages 9.2 Datensatz einlesen head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3.0 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5.0 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 ## Species ## 1 setosa ## 2 setosa ## 3 setosa ## 4 setosa ## 5 setosa ## 6 setosa st_iris &lt;- as.data.frame(scale(iris[,-5])) st_iris &lt;- tibble(st_iris) %&gt;% add_column(Species = iris$Species) 9.2.1 Beschreibung ## Sepal.Length Sepal.Width Petal.Length ## median 5.80000000 3.00000000 4.3500000 ## mean 5.84333333 3.05733333 3.7580000 ## SE.mean 0.06761132 0.03558833 0.1441360 ## CI.mean.0.95 0.13360085 0.07032302 0.2848146 ## var 0.68569351 0.18997942 3.1162779 ## std.dev 0.82806613 0.43586628 1.7652982 ## coef.var 0.14171126 0.14256420 0.4697441 ## Petal.Width Species ## median 1.30000000 NA ## mean 1.19933333 NA ## SE.mean 0.06223645 NA ## CI.mean.0.95 0.12298004 NA ## var 0.58100626 NA ## std.dev 0.76223767 NA ## coef.var 0.63555114 NA 9.2.2 Visualisieren ## plot: [1,1] [=&gt;------------------------] 6% est: 0s ## plot: [1,2] [==&gt;-----------------------] 12% est: 1s ## plot: [1,3] [====&gt;---------------------] 19% est: 1s ## plot: [1,4] [=====&gt;--------------------] 25% est: 1s ## plot: [2,1] [=======&gt;------------------] 31% est: 1s ## plot: [2,2] [=========&gt;----------------] 38% est: 1s ## plot: [2,3] [==========&gt;---------------] 44% est: 1s ## plot: [2,4] [============&gt;-------------] 50% est: 1s ## plot: [3,1] [==============&gt;-----------] 56% est: 1s ## plot: [3,2] [===============&gt;----------] 62% est: 1s ## plot: [3,3] [=================&gt;--------] 69% est: 1s ## plot: [3,4] [===================&gt;------] 75% est: 0s ## plot: [4,1] [====================&gt;-----] 81% est: 0s ## plot: [4,2] [======================&gt;---] 88% est: 0s ## plot: [4,3] [=======================&gt;--] 94% est: 0s ## plot: [4,4] [==========================]100% est: 0s 9.3 Lineare Diskriminanzanalyse 9.3.1 Test / Train train &lt;- sample(1:nrow(st_iris), 0.75*nrow(st_iris)) # 75 % fürs testen train_set &lt;- st_iris[train,] test_set &lt;- st_iris[-train,] 9.3.2 Modelltrainierung lda_train &lt;- lda(Species ~. , data = train_set) train_pred &lt;- predict(lda_train, train_set)$class table(train_pred, train_set$Species) ## ## train_pred setosa versicolor virginica ## setosa 36 0 0 ## versicolor 0 36 1 ## virginica 0 2 37 9.3.3 Bewertung anhand der Testdaten test_pred &lt;- predict(lda_train, test_set)$class table(test_pred, test_set$Species) ## ## test_pred setosa versicolor virginica ## setosa 14 0 0 ## versicolor 0 12 0 ## virginica 0 0 12 9.4 Random Forest Methode 9.4.1 Bildung mehrerer Entscheidungsbäume #wiederholung der Train-Test-Sets train &lt;- sample(1:nrow(st_iris), 0.75*nrow(st_iris)) # 75 % fürs testen train_set &lt;- st_iris[train,] test_set &lt;- st_iris[-train,] rf1 &lt;- randomForest( Species ~ ., data = train_set, ntree = 100, mtry = 2, importance = T, proximity = T ) rf1 ## ## Call: ## randomForest(formula = Species ~ ., data = train_set, ntree = 100, mtry = 2, importance = T, proximity = T) ## Type of random forest: classification ## Number of trees: 100 ## No. of variables tried at each split: 2 ## ## OOB estimate of error rate: 8.04% ## Confusion matrix: ## setosa versicolor virginica class.error ## setosa 36 0 0 0.0000000 ## versicolor 0 31 4 0.1142857 ## virginica 0 5 36 0.1219512 train_predict &lt;- predict(rf1, train_set[,-5], type = &quot;response&quot;) table(train_predict, train_set$Species) ## ## train_predict setosa versicolor virginica ## setosa 36 0 0 ## versicolor 0 35 0 ## virginica 0 0 41 test_predict &lt;- predict(rf1, test_set[,-5], type = &quot;response&quot;) table(test_predict, test_set$Species) ## ## test_predict setosa versicolor virginica ## setosa 14 0 0 ## versicolor 0 15 1 ## virginica 0 0 8 9.5 Neuronales Netzwerk 9.5.1 Standardisierung und Aufteilung der Daten st_iris[,5] &lt;- as.numeric(iris$Species) -1 st_iris &lt;- as.matrix(st_iris) train_set &lt;- st_iris[train,-5] test_set &lt;- st_iris[-train,-5] 9.5.2 Trainieren des Neuronalen Netzwerks 9.5.3 Evaluation score &lt;- dl %&gt;% evaluate(test_set, test_settarget, batch_size = 128) print(score) ## loss accuracy ## 0.0436032 1.0000000 # class &lt;- predict_classes(dl, test_set) #decepretated class &lt;- dl %&gt;% predict(test_set) %&gt;% k_argmax() class_numeric &lt;- as.numeric(class) table(as.numeric(class), st_iris[-train,5]) ## ## 0 1 2 ## 0 14 0 0 ## 1 0 15 0 ## 2 0 0 9 9.6 H20 Internetverbundenes Packet, basierend auf JAVA!! ich werde es nicht herunterladen, deswegen nur den ersten Block mitgeschrieben localH20 = h2o.init( ip = &quot;localhost&quot;, port = 54321, startH2O = T, nthreads = -1, max_mem_size = &quot;2G&quot; ) 9.7 Aufgabenblatt library(tidyverse) library(GGally) library(pastecs) load(&quot;data/biathlon4.RData&quot;) load(&quot;data/biathlon3.RData&quot;) a) Betrachten Sie zunächst alle Variablen im Datensatz und analysieren Sie diese hinsichtlich Ihrer Lage und Streuung. Lassen sich irgendwelche Auffälligkeiten feststellen? Wenn ja sollten Sie überlegen, wie Sie diese bereinigen bzw. beseitigen könnten. test %&gt;% dplyr::select(c(total.time, shoot.times.total, fails.total, type)) %&gt;% stat.desc(basic = F) ## total.time shoot.times.total fails.total ## median 1.808850e+03 92.0000000 2.00000000 ## mean 1.893898e+03 95.6011581 2.81648027 ## SE.mean 7.487072e+00 0.3059346 0.01727304 ## CI.mean.0.95 1.467577e+01 0.5996773 0.03385772 ## var 7.217802e+05 1204.2060904 3.84165770 ## std.dev 8.495765e+02 34.7016727 1.96001472 ## coef.var 4.485861e-01 0.3629838 0.69590927 ## type ## median NA ## mean NA ## SE.mean NA ## CI.mean.0.95 NA ## var NA ## std.dev NA ## coef.var NA test %&gt;% dplyr::select(c(total.time, shoot.times.total, tot.climb)) %&gt;% ggpairs() ## Warning in ggally_statistic(data = data, mapping = ## mapping, na.rm = na.rm, : Removed 10 rows containing ## missing values ## Warning in ggally_statistic(data = data, mapping = ## mapping, na.rm = na.rm, : Removed 57 rows containing ## missing values ## Warning: Removed 10 rows containing missing values ## (geom_point). ## Warning: Removed 10 rows containing non-finite values ## (stat_density). ## Warning in ggally_statistic(data = data, mapping = ## mapping, na.rm = na.rm, : Removed 67 rows containing ## missing values ## Warning: Removed 57 rows containing missing values ## (geom_point). ## Warning: Removed 67 rows containing missing values ## (geom_point). ## Warning: Removed 57 rows containing non-finite values ## (stat_density). test %&gt;% ggplot(aes(x = total.time, y = shoot.times.total, color = type)) + geom_point() + facet_wrap(~gender) ## Warning: Removed 10 rows containing missing values ## (geom_point). Komisch: bei letzem Graphen erkennbar eine kleine Gruppe mit niedrigen Zeiten, unabhängig vom Rest des Feldes vielleicht abhängig von Teamsachen test$is_team &lt;- grepl(&quot;[0-9]&quot;, test$nation) #checks if there are any numbers in nation name, a sign for a team base test %&gt;% ggplot(aes(x = total.time, y = shoot.times.total, color = is_team)) + geom_point() + facet_grid(~gender) ## Warning: Removed 10 rows containing missing values ## (geom_point). funktioniert so ein bisschen, nicht komplett, aber egal. 9.7.1 Filtern + Standardisieren des Datensatzes welche Variable wollen wir erkennen lassen ? colnames(test) ## [1] &quot;nation&quot; &quot;gender&quot; ## [3] &quot;type&quot; &quot;total.time&quot; ## [5] &quot;course.lap.1&quot; &quot;course.lap.2&quot; ## [7] &quot;course.lap.3&quot; &quot;course.lap.4&quot; ## [9] &quot;course.lap.5&quot; &quot;course.total&quot; ## [11] &quot;shoot.times.1&quot; &quot;shoot.times.2&quot; ## [13] &quot;shoot.times.3&quot; &quot;shoot.times.4&quot; ## [15] &quot;shoot.times.total&quot; &quot;fails.1&quot; ## [17] &quot;fails.2&quot; &quot;fails.3&quot; ## [19] &quot;fails.4&quot; &quot;fails.total&quot; ## [21] &quot;max.climb&quot; &quot;tot.climb&quot; ## [23] &quot;height.diff&quot; &quot;is_team&quot; Datensatz extrahierung st_test &lt;- test %&gt;% dplyr::select(total.time, course.total, shoot.times.total, height.diff) %&gt;% scale() st_train &lt;- train %&gt;% dplyr::select(total.time, course.total, shoot.times.total, height.diff) %&gt;% scale() "],["soziale-netzwerkanalyse.html", "10 26.01.22 Soziale Netzwerkanalyse 10.1 Imports 10.2 Read in the Data from online Resource 10.3 Tidying + Desc 10.4 Network Creation 10.5 5-Fragen-Beschreibung", " 10 26.01.22 Soziale Netzwerkanalyse 10.1 Imports 10.2 Read in the Data from online Resource # df &lt;- read_csv(&quot;https://github.com/tdenzl/MarvelNetwork/raw/main/data/hero-network.csv&quot;) # write_csv(df, &quot;data/hero_network.csv&quot;) Read in from /data after first step hero_network &lt;- read_csv(&quot;data/hero_network.csv&quot;) ## Rows: 574467 Columns: 2 ## ── Column specification ──────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (2): hero1, hero2 ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. 10.3 Tidying + Desc hero_network &lt;- hero_network %&gt;% mutate(hero1 = str_to_lower(hero1), hero2 = str_to_lower(hero2)) hero_network %&gt;% count(hero1,hero2, sort= T) %&gt;% rename(weight = n) %&gt;% head() ## # A tibble: 6 × 3 ## hero1 hero2 weight ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 patriot/jeff mace patriot/jeff mace 1275 ## 2 patriot/jeff mace miss america/madelin 1267 ## 3 miss america/madelin miss america/madelin 672 ## 4 miss america/madelin patriot/jeff mace 627 ## 5 thing/benjamin j. gr human torch/johnny s 382 ## 6 human torch/johnny s mr. fantastic/reed r 366 10.4 Network Creation skip.gram.count &lt;- hero_network %&gt;% count(hero1,hero2, sort= T) %&gt;% rename(weight = n) treshold &lt;- 50 network &lt;- skip.gram.count %&gt;% filter(weight &gt;= treshold) %&gt;% graph_from_data_frame(directed = F) V(network)$cluster &lt;- clusters(graph = network)$membership cc.network &lt;- induced_subgraph( graph = network, vids = which( V(network)$cluster == which.max(clusters(graph=network)$csize) ) ) Darstellung des Netzwerks: 10.5 5-Fragen-Beschreibung ähnlich zu 5-Punkt-Beschreibung, gut zur allg. Beschreibung eines Netzwerks 10.5.1 Size: Wie groß ist das Netzwerk? Wie viele Knoten / Verbindungen (engl: Vertices / Edges) hat das Netzwerk length(V(cc.network)) ## [1] 114 # 114 Knoten length(E(cc.network)) ## [1] 634 # 634 Verbindungen 10.5.2 Density: wie dicht ist das Netzwerks? wie nah sind die Knoten beieinander edge_density(cc.network) ## [1] 0.09843192 10.5.3 Components: wie viele Komponenten (Gesamtnetzwerke) hat das Netzwerk? gibt es unternetzwerke, die keine Verbindung haben zu anderem? count_components(cc.network) ## [1] 1 10.5.4 Compactness: wie kompakt ist das Netzwerk? wie viele Schritte braucht es maximal, Information im Netzwerk zu senden? diameter(cc.network) ## [1] 504 10.5.5 Transitivität: wie stark tendiert das Netzwerk dazu Cluster zu bilden? transitivity(cc.network) ## [1] 0.49751 Wert zwischen 0 &gt; T &gt; 1, wir sind gut in der Mitte, gibt aber Tendenzen "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
